#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ Pyrus –∏ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∞–≤–∏–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ PyrusClient –∏ –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
"""
import asyncio
import json
import os
import sys
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

from app.pyrus_client import PyrusClient
from app.rules.form_2304918 import check_rules as check_rules_2304918
from app.rules.form_792300 import check_rules as check_rules_792300

def _build_fields_meta(form_meta: dict) -> dict:
    """–°—Ç—Ä–æ–∏—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã"""
    out = {}
    for f in form_meta.get("fields", []) or []:
        fid = f.get("id")
        if isinstance(fid, int):
            out[fid] = {"name": f.get("name"), "type": f.get("type")}
    return out

def print_field_value(field_id: int, value, fields_meta: dict):
    """–í—ã–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ"""
    field_name = fields_meta.get(field_id, {}).get("name", f"–ü–æ–ª–µ {field_id}")
    
    if value is None:
        print(f"  [{field_id}] {field_name}: <–ø—É—Å—Ç–æ–µ>")
    elif isinstance(value, dict):
        if "checkmark" in value:
            status = "‚úì" if value.get("checkmark") == "checked" else "‚úó"
            print(f"  [{field_id}] {field_name}: {status}")
        elif "choice_names" in value:
            choices = value.get("choice_names", [])
            print(f"  [{field_id}] {field_name}: {choices}")
        elif "text" in value:
            print(f"  [{field_id}] {field_name}: \"{value.get('text')}\"")
        elif "date" in value:
            print(f"  [{field_id}] {field_name}: {value.get('date')}")
        else:
            print(f"  [{field_id}] {field_name}: {value}")
    else:
        print(f"  [{field_id}] {field_name}: {value}")

async def check_task_details(task_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ #{task_id}")
    print("=" * 60)
    
    client = PyrusClient()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    task_data = await client.get_task(task_id)
    if not task_data:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ #{task_id}")
        return
    
    print(f"üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: {task_data.get('subject') or task_data.get('text', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º—É –∏–∑ —Å–ø–∏—Å–∫–æ–≤ (added_list_ids) –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
    form_id = None
    
    # –ò—â–µ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö added_list_ids
    for comment in task_data.get("comments", []):
        added_lists = comment.get("added_list_ids", [])
        if added_lists:
            form_id = added_lists[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π ID —Ñ–æ—Ä–º—ã
            print(f"üîç –ù–∞–π–¥–µ–Ω form_id –≤ added_list_ids: {form_id}")
            break
    
    # Fallback: –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
    if not form_id:
        form_id = (task_data.get("form_id") or 
                   task_data.get("form", {}).get("id") or
                   task_data.get("structure_id") or
                   task_data.get("structure", {}).get("id"))
        if form_id:
            print(f"üîç –ù–∞–π–¥–µ–Ω form_id –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª—è—Ö: {form_id}")
    
    # –ü—Ä—è–º–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∑–∞–¥–∞—á (–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    if not form_id and task_id in [304880953, 305956884]:
        form_id = 792300
        print(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π form_id –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}: {form_id}")
    
    if not form_id:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Ñ–æ—Ä–º—ã")
        return
    
    print(f"üìù –§–æ—Ä–º–∞ ID: {form_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    form_meta = await client.get_form_meta(form_id)
    if not form_meta:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã {form_id}")
        return
    
    form_name = form_meta.get("name", f"–§–æ—Ä–º–∞ {form_id}")
    print(f"üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã: {form_name}")
    
    fields_meta = _build_fields_meta(form_meta)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è –∑–∞–¥–∞—á–∏ (–æ–Ω–∏ –≤ –∫–æ—Ä–Ω–µ –æ—Ç–≤–µ—Ç–∞)
    task_fields = task_data.get("fields", [])
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π –≤ task_data.fields: {len(task_fields)}")
    
    # –ï—Å–ª–∏ –≤ task_data.fields –ø—É—Å—Ç–æ, –ø–æ–ª—è –º–æ–≥—É—Ç –±—ã—Ç—å –≤ task.fields
    if not task_fields and "task" in task_data:
        task_fields = task_data["task"].get("fields", [])
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π –≤ task_data.task.fields: {len(task_fields)}")
    
    # DEBUG: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
    print(f"üîç –ö–ª—é—á–∏ –≤ task_data: {list(task_data.keys())}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏
    print("\nüîé –î–ê–ù–ù–´–ï –ü–û–õ–ï–ô:")
    print("-" * 40)
    for field in task_fields:
        field_id = field.get("id")
        value = field.get("value")
        if field_id and value is not None:
            print_field_value(field_id, value, fields_meta)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    print(f"\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í–ò–õ –í–ê–õ–ò–î–ê–¶–ò–ò:")
    print("-" * 40)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –ë–ü–ó –∫–∞–∫ target_day (14 —Å–µ–Ω—Ç—è–±—Ä—è)
    target_day = "2025-09-14"
    print(f"–¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞: {target_day}")
    
    try:
        if form_id == 2304918:
            errors_map = check_rules_2304918(fields_meta, task_fields, target_day, "today21")
        elif form_id == 792300:
            errors_map = check_rules_792300(fields_meta, task_fields, target_day, "today21")
        else:
            print(f"‚ö†Ô∏è –§–æ—Ä–º–∞ {form_id} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª")
            return
        
        general_errors = errors_map.get("general", [])
        rule3_errors = errors_map.get("rule3", [])
        
        if general_errors:
            print("\nüö® –û–ë–©–ò–ï –û–®–ò–ë–ö–ò:")
            for i, error in enumerate(general_errors, 1):
                print(f"  {i}. {error}")
        
        if rule3_errors:
            print("\nüéØ –û–®–ò–ë–ö–ò –ü–†–ê–í–ò–õ–ê 3:")
            for i, error in enumerate(rule3_errors, 1):
                print(f"  {i}. {error}")
        
        if not general_errors and not rule3_errors:
            print("‚úÖ –ù–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤–∏–ª: {e}")
    
    print("\n" + "=" * 60)

async def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python check_task.py <TASK_ID>")
        print("–ü—Ä–∏–º–µ—Ä: python check_task.py 304880953")
        sys.exit(1)
    
    try:
        task_id = int(sys.argv[1])
    except ValueError:
        print("‚ùå ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        sys.exit(1)
    
    await check_task_details(task_id)

if __name__ == "__main__":
    asyncio.run(main())
