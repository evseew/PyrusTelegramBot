#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ PyrusTelegramBot
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–¥–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
"""
import os
import sys
import subprocess
import argparse
from datetime import datetime
from pathlib import Path

def run_command(cmd):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    print(f"üöÄ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {' '.join(cmd)}")
    print("-" * 50)
    result = subprocess.run(cmd, text=True)
    print("-" * 50)
    return result.returncode == 0

def interactive_menu():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("""
üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PyrusTelegramBot
================================

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:

1. üèÉ‚Äç‚ôÇÔ∏è –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (10-15 —Å–µ–∫)
   –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

2. üî¨ –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (30-60 —Å–µ–∫)
   –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã

3. üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–æ–π –º–∞—à–∏–Ω–æ–π
   –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–µ–∂–¥—É –º–∞—à–∏–Ω–∞–º–∏

4. üìñ –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
   –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

5. üõ†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É
   –¶–µ–ª–µ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

0. ‚ùå –í—ã—Ö–æ–¥

–í–∞—à –≤—ã–±–æ—Ä: """, end="")
    
    choice = input().strip()
    return choice

def quick_diagnostics():
    """–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("\n‚ö° –ó–ê–ü–£–°–ö –ë–´–°–¢–†–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("=" * 50)
    
    python_cmd = get_python_command()
    if not python_cmd:
        return False
    
    return run_command([python_cmd, "quick_diagnostics.py"])

def full_diagnostics():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("\nüî¨ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("=" * 50)
    
    python_cmd = get_python_command()
    if not python_cmd:
        return False
    
    success = run_command([python_cmd, "system_diagnostics.py"])
    
    if success:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        reports = list(Path(".").glob("diagnostic_report_*.json"))
        if reports:
            latest_report = max(reports, key=lambda p: p.stat().st_mtime)
            print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {latest_report}")
            print("üí° –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –¥—Ä—É–≥–æ–π –º–∞—à–∏–Ω–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é 3")
    
    return success

def compare_diagnostics():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–µ–∂–¥—É –º–∞—à–∏–Ω–∞–º–∏"""
    print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("=" * 50)
    
    # –ò—â–µ–º JSON –æ—Ç—á–µ—Ç—ã
    reports = list(Path(".").glob("diagnostic_report_*.json"))
    
    if len(reports) < 1:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏!")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É (–æ–ø—Ü–∏—è 2)")
        return False
    
    if len(reports) == 1:
        print("üìÑ –ù–∞–π–¥–µ–Ω –æ–¥–∏–Ω –æ—Ç—á–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:")
        print(f"   {reports[0]}")
        print("\n‚ùì –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω—É–∂–Ω—ã –æ—Ç—á–µ—Ç—ã —Å –¥–≤—É—Ö –º–∞—à–∏–Ω.")
        print("üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
        print("   1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –æ—Ç—á–µ—Ç –Ω–∞ –¥—Ä—É–≥—É—é –º–∞—à–∏–Ω—É")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –Ω–∞ –≤—Ç–æ—Ä–æ–π –º–∞—à–∏–Ω–µ")  
        print("   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç compare_diagnostics.py")
        
        return True
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç—á–µ—Ç–æ–≤, –≤—ã–±–∏—Ä–∞–µ–º –¥–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
    reports.sort(key=lambda p: p.stat().st_mtime, reverse=True)
    
    print("üìÑ –ù–∞–π–¥–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:")
    for i, report in enumerate(reports[:5], 1):
        mtime = datetime.fromtimestamp(report.stat().st_mtime)
        print(f"   {i}. {report} ({mtime.strftime('%Y-%m-%d %H:%M:%S')})")
    
    if len(reports) >= 2:
        print(f"\nüîÑ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç—á–µ—Ç–∞:")
        print(f"   –û—Ç—á–µ—Ç 1: {reports[1]}")
        print(f"   –û—Ç—á–µ—Ç 2: {reports[0]}")
        
        python_cmd = get_python_command()
        if not python_cmd:
            return False
        
        return run_command([
            python_cmd, "compare_diagnostics.py",
            str(reports[1]), str(reports[0]),
            "--name1", "–ë–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–π",
            "--name2", "–ë–æ–ª–µ–µ –Ω–æ–≤—ã–π"
        ])
    
    return True

def show_instructions():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    readme_path = Path("DIAGNOSTICS_README.md")
    
    if readme_path.exists():
        print("\nüìñ –ü–û–î–†–û–ë–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò")
        print("=" * 50)
        
        try:
            with open(readme_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å (–ø–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–æ–∫)
            lines = content.split('\n')
            for line in lines[:100]:
                print(line)
            
            if len(lines) > 100:
                print("\n... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–æ–∫)")
                print(f"üìÑ –ü–æ–ª–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ: {readme_path}")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {e}")
            return False
    else:
        print("‚ùå –§–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    return True

def targeted_diagnostics():
    """–¶–µ–ª–µ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
    print("\nüõ†Ô∏è –¶–ï–õ–ï–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê")
    print("=" * 50)
    
    problems = {
        "1": ("–ü—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–æ–º –º–æ–¥—É–ª–µ–π", check_imports),
        "2": ("–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_environment),
        "3": ("–ü—Ä–æ–±–ª–µ–º—ã —Å API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏", check_apis),
        "4": ("–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–∫–µ—Ç–∞–º–∏ Python", check_packages),
        "5": ("–ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞", check_permissions)
    }
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:")
    for key, (description, _) in problems.items():
        print(f"   {key}. {description}")
    print("   0. –ù–∞–∑–∞–¥")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()
    
    if choice == "0":
        return True
    
    if choice in problems:
        description, func = problems[choice]
        print(f"\nüîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {description}")
        print("-" * 50)
        return func()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        return False

def check_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    modules = [
        "fastapi", "uvicorn", "telegram", "supabase", 
        "httpx", "pandas", "openpyxl", "dotenv",
        "app.api", "app.bot", "app.worker", "app.db"
    ]
    
    failed = []
    
    for module in modules:
        try:
            __import__(module.replace("-", "_"))
            print(f"‚úÖ {module}")
        except ImportError as e:
            print(f"‚ùå {module}: {e}")
            failed.append(module)
    
    if failed:
        print(f"\nüîß –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print("pip install " + " ".join(f for f in failed if not f.startswith("app.")))
    
    return len(failed) == 0

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    try:
        from dotenv import load_dotenv
        load_dotenv()
    except ImportError:
        print("‚ùå python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    required_vars = [
        "BOT_TOKEN", "SUPABASE_URL", "SUPABASE_KEY",
        "PYRUS_LOGIN", "PYRUS_SECURITY_KEY"
    ]
    
    missing = []
    
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ({len(value)} —Å–∏–º–≤–æ–ª–æ–≤)")
        else:
            print(f"‚ùå {var}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")
            missing.append(var)
    
    if missing:
        print(f"\nüîß –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:")
        for var in missing:
            print(f"{var}=your_value_here")
    
    return len(missing) == 0

def check_apis():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    import asyncio
    
    async def test_apis():
        try:
            import httpx
            
            apis = []
            
            bot_token = os.getenv("BOT_TOKEN")
            if bot_token:
                apis.append(("Telegram Bot API", f"https://api.telegram.org/bot{bot_token}/getMe"))
            
            supabase_url = os.getenv("SUPABASE_URL")
            if supabase_url:
                apis.append(("Supabase", f"{supabase_url}/rest/v1/"))
            
            async with httpx.AsyncClient(timeout=10) as client:
                for name, url in apis:
                    try:
                        response = await client.get(url)
                        if response.status_code < 400:
                            print(f"‚úÖ {name}: –¥–æ—Å—Ç—É–ø–µ–Ω")
                        else:
                            print(f"‚ùå {name}: HTTP {response.status_code}")
                    except Exception as e:
                        print(f"‚ùå {name}: {e}")
        
        except ImportError:
            print("‚ùå httpx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
    
    try:
        asyncio.run(test_apis())
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}")
        return False

def check_packages():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–æ–≤"""
    try:
        with open("requirements.txt", "r") as f:
            required = [line.strip().split("==")[0] for line in f if line.strip() and not line.startswith("#")]
        
        missing = []
        for package in required:
            try:
                __import__(package.replace("-", "_"))
                print(f"‚úÖ {package}")
            except ImportError:
                print(f"‚ùå {package}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                missing.append(package)
        
        if missing:
            print(f"\nüîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install {' '.join(missing)}")
        
        return len(missing) == 0
        
    except FileNotFoundError:
        print("‚ùå requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def check_permissions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    files_to_check = [
        "app/", ".env", "requirements.txt", "logs/"
    ]
    
    issues = []
    
    for file_path in files_to_check:
        path = Path(file_path)
        if path.exists():
            readable = os.access(path, os.R_OK)
            writable = os.access(path, os.W_OK)
            
            status = "‚úÖ" if readable and writable else "‚ùå"
            perms = f"{'r' if readable else '-'}{'w' if writable else '-'}"
            print(f"{status} {file_path}: {perms}")
            
            if not readable or not writable:
                issues.append(file_path)
        else:
            print(f"‚ö™ {file_path}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if issues:
        print(f"\nüîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∞: chmod -R 755 {' '.join(issues)}")
    
    return len(issues) == 0

def get_python_command():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Python"""
    for cmd in ["python3", "python"]:
        try:
            result = subprocess.run([cmd, "--version"], capture_output=True, text=True)
            if result.returncode == 0:
                return cmd
        except FileNotFoundError:
            continue
    
    print("‚ùå Python –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.7+")
    return None

def check_prerequisites():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    required_files = ["app/", "requirements.txt"]
    missing = [f for f in required_files if not Path(f).exists()]
    
    if missing:
        print(f"‚ùå –í—ã –Ω–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ PyrusTelegramBot!")
        print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing)}")
        print("üí° –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    if not get_python_command():
        return False
    
    return True

def main():
    parser = argparse.ArgumentParser(description="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ PyrusTelegramBot")
    parser.add_argument("--quick", action="store_true", help="–ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
    parser.add_argument("--full", action="store_true", help="–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞") 
    parser.add_argument("--compare", action="store_true", help="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤")
    parser.add_argument("--help-docs", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    if not check_prerequisites():
        sys.exit(1)
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PyrusTelegramBot")
    print("=" * 50)
    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {Path.cwd()}")
    print(f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 50)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if args.quick:
        return 0 if quick_diagnostics() else 1
    elif args.full:
        return 0 if full_diagnostics() else 1
    elif args.compare:
        return 0 if compare_diagnostics() else 1
    elif args.help_docs:
        return 0 if show_instructions() else 1
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    while True:
        choice = interactive_menu()
        
        if choice == "0":
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        elif choice == "1":
            quick_diagnostics()
        elif choice == "2":
            full_diagnostics()
        elif choice == "3":
            compare_diagnostics()
        elif choice == "4":
            show_instructions()
        elif choice == "5":
            targeted_diagnostics()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
        input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    return 0

if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\nüëã –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

