#!/usr/bin/env python3
"""
–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–∞–º —É—Ä–æ–∫–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (—Ñ–æ—Ä–º–∞ 697550).

–§–æ—Ä–º–∏—Ä—É–µ—Ç Excel-–æ—Ç—á–µ—Ç —Å —Ç—Ä–µ–º—è –≤–∫–ª–∞–¥–∫–∞–º–∏:
1. –†–µ–π—Ç–∏–Ω–≥ —Ñ–∏–ª–∏–∞–ª–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–µ (—Å –ø—Ä–∏–∑–∞–º–∏ —Ç–æ–ø-3)
2. –î–µ—Ç–∞–ª–∏ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º (–≤—Å–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ —Å –∏—Ö –æ—Ü–µ–Ω–∫–∞–º–∏)
3. –†–µ–π—Ç–∏–Ω–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –∏ –∫—É—Ä—Å–∞–º

–§–æ—Ä–º–∞ 697550 "–ê–Ω–∞–ª–∏–∑ —É—Ä–æ–∫–∞":
  * –ü–æ–ª–µ 47: –§–∏–ª–∏–∞–ª (catalog)
  * –ü–æ–ª–µ 48: –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å (person)
  * –ü–æ–ª–µ 34: –û—Ü–µ–Ω–∫–∞ –∑–∞ —É—Ä–æ–∫ (multiple_choice: –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ 1-10)
            –í–õ–û–ñ–ï–ù–ù–û–ï –≤ –ø–æ–ª–µ 29 "–ê–Ω–∞–ª–∏–∑ —É—Ä–æ–∫–∞. –ó–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π"
  * –ü–æ–ª–µ 45: –ö–∞—Ç–µ–≥–æ—Ä–∏—è (multiple_choice)
  * –ü–æ–ª–µ 37: –ü—Ä–æ–≥—Ä–∞–º–º–∞ (catalog)
  * –ü–æ–ª–µ 52: –ö—É—Ä—Å (multiple_choice)
  
  –í–ê–ñ–ù–û: –ü–æ–ª–µ 34 –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏, –º–µ—Ç–æ–¥ _get_field_value
  –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π.
  –ú–µ—Ç–æ–¥ _extract_lesson_score –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  –∏–∑ choice_names –¥–ª—è –ø–æ–ª–µ–π —Ç–∏–ø–∞ multiple_choice.
"""

import asyncio
import sys
import os
import json
from pathlib import Path
from typing import Dict, List, Any, Optional
from datetime import datetime
from collections import defaultdict

from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º app –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(Path(__file__).parent / "app"))

from pyrus_client import PyrusClient


class LessonCheckStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ —É—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è."""
    
    def __init__(self, name: str):
        self.name = name
        self.total_checks = 0
        self.total_score = 0.0  # –°—É–º–º–∞ –æ—Ü–µ–Ω–æ–∫
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º
        self.checks_by_branch: Dict[str, List[float]] = defaultdict(list)
        self.checks_by_category: Dict[str, List[float]] = defaultdict(list)
        self.checks_by_program: Dict[str, List[float]] = defaultdict(list)
        self.checks_by_course: Dict[str, List[float]] = defaultdict(list)
        
        # –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        self.raw_checks: List[Dict[str, Any]] = []
    
    @property
    def average_score(self) -> float:
        """–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è."""
        if self.total_checks == 0:
            return 0.0
        return self.total_score / self.total_checks
    
    def add_check(self, score: float, branch: str, category: str, program: str, course: str, task_id: int) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        self.total_checks += 1
        self.total_score += score
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º
        self.checks_by_branch[branch].append(score)
        self.checks_by_category[category].append(score)
        self.checks_by_program[program].append(score)
        self.checks_by_course[course].append(score)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.raw_checks.append({
            "task_id": task_id,
            "score": score,
            "branch": branch,
            "category": category,
            "program": program,
            "course": course
        })


class BranchLessonStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ —É—Ä–æ–∫–æ–≤ –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞."""
    
    def __init__(self, name: str):
        self.name = name
        self.total_checks = 0
        self.total_score = 0.0
        self.teachers: Dict[str, List[float]] = defaultdict(list)  # {teacher: [scores]}
    
    @property
    def average_score(self) -> float:
        """–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Ñ–∏–ª–∏–∞–ª–∞."""
        if self.total_checks == 0:
            return 0.0
        return self.total_score / self.total_checks
    
    def add_check(self, score: float, teacher_name: str) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∏–ª–∏–∞–ª–∞."""
        self.total_checks += 1
        self.total_score += score
        self.teachers[teacher_name].append(score)


class LessonChecksAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —É—Ä–æ–∫–æ–≤ –∏–∑ Pyrus."""
    
    def __init__(self, config_path: str = "lesson_checks_config.json"):
        self.client = PyrusClient()
        self.teachers_stats: Dict[str, LessonCheckStats] = {}
        self.branches_stats: Dict[str, BranchLessonStats] = {}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = self._load_config(config_path)
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.total_tasks_processed = 0
        self.valid_tasks_count = 0
        self.invalid_score_count = 0
        self.excluded_by_period_count = 0
        self.excluded_teachers_count = 0
        self.excluded_branches_count = 0
        self.unknown_branch_count = 0  # –°—á–µ—Ç—á–∏–∫ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª"
        
        # –¢—Ä–µ–∫–∏–Ω–≥ –¥–∞—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.earliest_date = None
        self.latest_date = None
    
    def _load_config(self, config_path: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞."""
        config_file = Path(__file__).parent / config_path
        
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
                print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_path}")
                return config
        except FileNotFoundError:
            print(f"‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            return self._get_default_config()
        except json.JSONDecodeError as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {config_path}: {e}. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            return self._get_default_config()
    
    def _get_default_config(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        return {
            "form_id": 697550,
            "period": {"enabled": False},
            "excluded_teachers": [],
            "excluded_branches": [],
            "min_score": 1,
            "max_score": 10,
            "include_archived": True,
            "prizes": {
                "branch_top3": ["üí∞ 15 000 —Ä—É–±.", "üí∞ 10 000 —Ä—É–±.", "üí∞ 5 000 —Ä—É–±."]
            },
            "output": {
                "directory": "reports",
                "filename_prefix": "lesson_checks_report",
                "add_timestamp": True
            }
        }
    
    def _get_field_value(self, field_list: List[Dict[str, Any]], field_id: int) -> Optional[Any]:
        """–ò—â–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –ø–æ id, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏."""
        for f in field_list or []:
            if f.get("id") == field_id:
                return f.get("value")
            val = f.get("value")
            if isinstance(val, dict) and isinstance(val.get("fields"), list):
                nested = self._get_field_value(val.get("fields") or [], field_id)
                if nested is not None:
                    return nested
        return None
    
    def _extract_teacher_name(self, task_fields: List[Dict[str, Any]], field_id: int) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞."""
        value = self._get_field_value(task_fields, field_id)
        
        if isinstance(value, dict):
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ person-–æ–±—ä–µ–∫—Ç–∞: first_name/last_name
            first_name = value.get("first_name", "")
            last_name = value.get("last_name", "")
            if isinstance(first_name, str) or isinstance(last_name, str):
                full_name = f"{(first_name or '').strip()} {(last_name or '').strip()}".strip()
                if full_name:
                    return full_name
            
            # –î–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–±—ã—á–Ω–æ –µ—Å—Ç—å –ø–æ–ª–µ text –∏–ª–∏ name
            for key in ("text", "name", "value"):
                name_val = value.get(key)
                if isinstance(name_val, str) and name_val.strip():
                    return name_val.strip()
        
        if isinstance(value, str):
            return value.strip()
        
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
    
    def _normalize_branch_name(self, branch_name: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
        branch_name = branch_name.lower().strip()
        
        # –¢–æ–ª—å–∫–æ —Ñ–∏–ª–∏–∞–ª –ö–æ–º–º—É–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∏–π 22 —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –ö–æ–ø–µ–π—Å–∫
        if "–∫–æ–º–º—É–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∏–π" in branch_name and "22" in branch_name:
            return "–ö–æ–ø–µ–π—Å–∫"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
        return branch_name.title()
    
    def _extract_branch_name(self, task_fields: List[Dict[str, Any]], field_id: int, debug: bool = False) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ –∏–∑ –ø–æ–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞."""
        value = self._get_field_value(task_fields, field_id)
        
        if debug and value:
            print(f"üîç DEBUG: –ü–æ–ª–µ {field_id} —Å–æ–¥–µ—Ä–∂–∏—Ç: {json.dumps(value, ensure_ascii=False, indent=2)[:500]}")
        
        if isinstance(value, dict):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Å–∏–≤ values - –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤
            values = value.get("values")
            if isinstance(values, list) and len(values) > 0:
                branch_name = values[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                if isinstance(branch_name, str) and branch_name.strip():
                    return self._normalize_branch_name(branch_name.strip())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rows –µ—Å–ª–∏ values –Ω–µ –Ω–∞–π–¥–µ–Ω  
            rows = value.get("rows")
            if isinstance(rows, list) and len(rows) > 0 and isinstance(rows[0], list) and len(rows[0]) > 0:
                branch_name = rows[0][0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —è—á–µ–π–∫—É –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                if isinstance(branch_name, str) and branch_name.strip():
                    return self._normalize_branch_name(branch_name.strip())
            
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –æ–±—ã—á–Ω–æ –µ—Å—Ç—å –ø–æ–ª–µ text –∏–ª–∏ name
            for key in ("text", "name", "value"):
                branch_val = value.get(key)
                if isinstance(branch_val, str) and branch_val.strip():
                    return self._normalize_branch_name(branch_val.strip())
        
        if isinstance(value, str):
            return self._normalize_branch_name(value.strip())
        
        if debug:
            print(f"‚ö†Ô∏è  DEBUG: –§–∏–ª–∏–∞–ª –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –ø–æ–ª—è {field_id}")
        
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª"
    
    def _extract_lesson_score(self, task_fields: List[Dict[str, Any]], field_id: int) -> Optional[float]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –∑–∞ —É—Ä–æ–∫ (–ø–æ–ª–µ 34 –∏–ª–∏ –¥—Ä—É–≥–∏–µ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è).
        
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
        - –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è (number)
        - –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è —Å —á–∏—Å–ª–æ–º (text)
        - –ü–æ–ª—è –≤—ã–±–æ—Ä–∞ —Å —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º (multiple_choice)
        """
        value = self._get_field_value(task_fields, field_id)
        
        if value is None:
            return None
        
        # –ï—Å–ª–∏ —á–∏—Å–ª–æ
        if isinstance(value, (int, float)):
            return float(value)
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º
        if isinstance(value, str):
            value = value.strip()
            if not value:
                return None
            try:
                return float(value)
            except ValueError:
                return None
        
        # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç (–¥–ª—è multiple_choice, number –∏ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤)
        if isinstance(value, dict):
            # –î–ª—è multiple_choice: –ø—Ä–æ–≤–µ—Ä—è–µ–º choice_names
            choice_names = value.get("choice_names")
            if isinstance(choice_names, list) and len(choice_names) > 0:
                choice = choice_names[0]
                if isinstance(choice, (int, float)):
                    return float(choice)
                if isinstance(choice, str):
                    try:
                        return float(choice.strip())
                    except ValueError:
                        pass
            
            # –î–ª—è number/text: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è
            for key in ("value", "number", "text"):
                val = value.get(key)
                if isinstance(val, (int, float)):
                    return float(val)
                if isinstance(val, str):
                    try:
                        return float(val.strip())
                    except ValueError:
                        continue
        
        return None
    
    def _is_teacher_excluded(self, teacher_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–∫–ª—é—á–µ–Ω –ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏–∑ –æ—Ç—á–µ—Ç–∞."""
        excluded_list = self.config.get("excluded_teachers", [])
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if teacher_name in excluded_list:
            return True
        
        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Ñ–∞–º–∏–ª–∏—è –≤—Ö–æ–¥–∏—Ç –≤ –∏–º—è)
        teacher_lower = teacher_name.lower()
        for excluded_name in excluded_list:
            if excluded_name.lower() in teacher_lower:
                return True
        
        return False
    
    def _is_branch_excluded(self, branch_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–∫–ª—é—á–µ–Ω –ª–∏ —Ñ–∏–ª–∏–∞–ª –∏–∑ –æ—Ç—á–µ—Ç–∞."""
        excluded_list = self.config.get("excluded_branches", [])
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if branch_name in excluded_list:
            return True
        
        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        branch_lower = branch_name.lower()
        for excluded_name in excluded_list:
            if excluded_name.lower() in branch_lower:
                return True
        
        return False
    
    def _is_in_period(self, task: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –∑–∞–¥–∞—á–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
        period_config = self.config.get("period", {})
        
        # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É –æ—Ç–∫–ª—é—á–µ–Ω
        if not period_config.get("enabled", False):
            return True
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        create_date_str = task.get("create_date")
        if not create_date_str:
            return True  # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ—Ç - –≤–∫–ª—é—á–∞–µ–º
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç ISO: 2024-09-01T10:30:00Z)
            task_date = datetime.fromisoformat(create_date_str.replace('Z', '+00:00'))
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–¥–µ–ª–∞–µ–º timezone-aware)
            start_date_str = period_config.get("start_date")
            end_date_str = period_config.get("end_date")
            
            if start_date_str:
                # –°–æ–∑–¥–∞–µ–º timezone-aware –¥–∞—Ç—É
                start_date = datetime.strptime(start_date_str, "%Y-%m-%d")
                # –î–µ–ª–∞–µ–º naive datetime timezone-aware (–∏—Å–ø–æ–ª—å–∑—É–µ–º UTC)
                from datetime import timezone
                start_date = start_date.replace(tzinfo=timezone.utc)
                if task_date < start_date:
                    return False
            
            if end_date_str:
                # –°–æ–∑–¥–∞–µ–º timezone-aware –¥–∞—Ç—É
                end_date = datetime.strptime(end_date_str, "%Y-%m-%d")
                # –î–æ–±–∞–≤–ª—è–µ–º 1 –¥–µ–Ω—å —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –≤–µ—Å—å –∫–æ–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å
                end_date = end_date.replace(hour=23, minute=59, second=59, tzinfo=timezone.utc)
                if task_date > end_date:
                    return False
            
            return True
        
        except (ValueError, AttributeError) as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–∫–ª—é—á–∞–µ–º –∑–∞–¥–∞—á—É
    
    def _extract_catalog_value(self, task_fields: List[Dict[str, Any]], field_id: int) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–æ–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è/–ø—Ä–æ–≥—Ä–∞–º–º–∞/–∫—É—Ä—Å)."""
        value = self._get_field_value(task_fields, field_id)
        
        if isinstance(value, dict):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º choice_names –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –≤—ã–±–æ—Ä–∞
            choice_names = value.get("choice_names")
            if isinstance(choice_names, list) and len(choice_names) > 0:
                return str(choice_names[0])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Å–∏–≤ values
            values = value.get("values")
            if isinstance(values, list) and len(values) > 0:
                return str(values[0])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rows
            rows = value.get("rows")
            if isinstance(rows, list) and len(rows) > 0 and isinstance(rows[0], list) and len(rows[0]) > 0:
                return str(rows[0][0])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º text, name, value
            for key in ("text", "name", "value"):
                cat_val = value.get(key)
                if isinstance(cat_val, str) and cat_val.strip():
                    return cat_val.strip()
        
        if isinstance(value, str):
            return value.strip()
        
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    async def analyze_form_697550(self) -> None:
        """–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã 697550 (–ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–∫–æ–≤)."""
        form_id = self.config.get("form_id", 697550)
        include_archived = self.config.get("include_archived", True)
        
        print(f"–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã {form_id} (–ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–∫–æ–≤)...")
        period_config = self.config.get('period', {})
        if period_config.get('enabled'):
            print(f"  ‚Ä¢ –ü–µ—Ä–∏–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: –í–∫–ª—é—á–µ–Ω ({period_config.get('start_date')} ‚Üí {period_config.get('end_date')})")
        else:
            print(f"  ‚Ä¢ –ü–µ—Ä–∏–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: –û—Ç–∫–ª—é—á–µ–Ω")
        print(f"  ‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {len(self.config.get('excluded_teachers', []))}")
        print(f"  ‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤: {len(self.config.get('excluded_branches', []))}")
        print(f"  ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω –æ—Ü–µ–Ω–æ–∫: {self.config.get('min_score', 1)}-{self.config.get('max_score', 10)}")
        print()
        
        branch_field_id = 47
        teacher_field_id = 48
        score_field_id = 34
        category_field_id = 45
        program_field_id = 37
        course_field_id = 52
        
        task_count = 0
        
        async for task in self.client.iter_register_tasks(form_id, include_archived=include_archived):
            task_count += 1
            if task_count % 100 == 0:
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {task_count} –∑–∞–¥–∞—á —Ñ–æ—Ä–º—ã 697550...")
            
            task_fields = task.get("fields", [])
            task_id = task.get("id")
            
            self.total_tasks_processed += 1
            
            # –¢—Ä–µ–∫–∞–µ–º –¥–∞—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            create_date_str = task.get("create_date")
            if create_date_str:
                try:
                    task_date = datetime.fromisoformat(create_date_str.replace('Z', '+00:00'))
                    if self.earliest_date is None or task_date < self.earliest_date:
                        self.earliest_date = task_date
                    if self.latest_date is None or task_date > self.latest_date:
                        self.latest_date = task_date
                except Exception:
                    pass
            
            # –§–∏–ª—å—Ç—Ä 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–∏–æ–¥–∞
            if not self._is_in_period(task):
                self.excluded_by_period_count += 1
                continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            branch_name = self._extract_branch_name(task_fields, branch_field_id)
            
            # –°—á–∏—Ç–∞–µ–º "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª" (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
            if branch_name == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª":
                self.unknown_branch_count += 1
            
            teacher_name = self._extract_teacher_name(task_fields, teacher_field_id)
            lesson_score = self._extract_lesson_score(task_fields, score_field_id)
            category = self._extract_catalog_value(task_fields, category_field_id)
            program = self._extract_catalog_value(task_fields, program_field_id)
            course = self._extract_catalog_value(task_fields, course_field_id)
            
            # –§–∏–ª—å—Ç—Ä 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            if self._is_teacher_excluded(teacher_name):
                self.excluded_teachers_count += 1
                continue
            
            # –§–∏–ª—å—Ç—Ä 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤
            if self._is_branch_excluded(branch_name):
                self.excluded_branches_count += 1
                continue
            
            # –§–∏–ª—å—Ç—Ä 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
            min_score = self.config.get("min_score", 1)
            max_score = self.config.get("max_score", 10)
            
            if lesson_score is None or lesson_score < min_score or lesson_score > max_score:
                self.invalid_score_count += 1
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π
            
            self.valid_tasks_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
            if teacher_name not in self.teachers_stats:
                self.teachers_stats[teacher_name] = LessonCheckStats(teacher_name)
            
            teacher_stats = self.teachers_stats[teacher_name]
            teacher_stats.add_check(
                score=lesson_score,
                branch=branch_name,
                category=category,
                program=program,
                course=course,
                task_id=task_id
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∏–ª–∏–∞–ª–∞
            if branch_name not in self.branches_stats:
                self.branches_stats[branch_name] = BranchLessonStats(branch_name)
            
            branch_stats = self.branches_stats[branch_name]
            branch_stats.add_check(lesson_score, teacher_name)
        
        print(f"–ó–∞–≤–µ—Ä—à–µ–Ω –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã {form_id}.")
        print(f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: {task_count}")
        
        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–∏–æ–¥ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞—Ç
        if self.earliest_date and self.latest_date:
            earliest_str = self.earliest_date.strftime("%Y-%m-%d")
            latest_str = self.latest_date.strftime("%Y-%m-%d")
            print(f"  ‚Ä¢ –ü–µ—Ä–∏–æ–¥ –∑–∞–¥–∞—á (create_date): {earliest_str} ‚Üí {latest_str}")
        
        print(f"  ‚Ä¢ –í–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {self.valid_tasks_count}")
        print(f"  ‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–æ –ø–æ –ø–µ—Ä–∏–æ–¥—É: {self.excluded_by_period_count}")
        print(f"  ‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {self.excluded_teachers_count}")
        print(f"  ‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–æ —Ñ–∏–ª–∏–∞–ª–æ–≤: {self.excluded_branches_count}")
        print(f"  ‚Ä¢ –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫: {self.invalid_score_count}")
        print(f"  ‚Ä¢ '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª': {self.unknown_branch_count}")
        print()
    
    def create_excel_reports(self, filename: str = "lesson_checks_report.xlsx") -> None:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π Excel —Ñ–∞–π–ª —Å 3 –≤–∫–ª–∞–¥–∫–∞–º–∏."""
        print(f"–°–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞: {filename}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Ñ–∞–π–ª —Å —Ç—Ä–µ–º—è –ª–∏—Å—Ç–∞–º–∏
        wb = Workbook()
        
        # –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–∏—Å—Ç
        wb.remove(wb.active)
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –†–µ–π—Ç–∏–Ω–≥ —Ñ–∏–ª–∏–∞–ª–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–µ
        print("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ '–†–µ–π—Ç–∏–Ω–≥ —Ñ–∏–ª–∏–∞–ª–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–µ'...")
        self._create_branches_rating_sheet(wb)
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –î–µ—Ç–∞–ª–∏ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º
        print("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ '–î–µ—Ç–∞–ª–∏ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º'...")
        self._create_branches_details_sheet(wb)
        
        # –í–∫–ª–∞–¥–∫–∞ 3: –†–µ–π—Ç–∏–Ω–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –∏ –∫—É—Ä—Å–∞–º
        print("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ '–†–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –∏ –∫—É—Ä—Å–∞–º'...")
        self._create_rankings_sheet(wb)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        wb.save(filename)
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    
    def _create_branches_rating_sheet(self, wb: Workbook) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É '–†–µ–π—Ç–∏–Ω–≥ —Ñ–∏–ª–∏–∞–ª–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–µ'."""
        ws = wb.create_sheet("–†–µ–π—Ç–∏–Ω–≥ —Ñ–∏–ª–∏–∞–ª–æ–≤")
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [
            "üè¢ –§–∏–ª–∏–∞–ª",
            "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫",
            "‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞",
            "üèÜ –ü—Ä–∏–∑"
        ]
        
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = Font(bold=True)
            cell.fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")
            cell.alignment = Alignment(horizontal="center")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–ª–∏–∞–ª—ã –ø–æ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–µ (—É–±—ã–≤–∞–Ω–∏–µ)
        sorted_branches = sorted(
            self.branches_stats.values(),
            key=lambda x: x.average_score,
            reverse=True
        )
        
        # –ü—Ä–∏–∑—ã –¥–ª—è —Ç–æ–ø-3 –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        prizes = self.config.get("prizes", {}).get("branch_top3", [
            "üí∞ 15 000 —Ä—É–±.",
            "üí∞ 10 000 —Ä—É–±.",
            "üí∞ 5 000 —Ä—É–±."
        ])
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º
        row = 2
        for i, branch_stats in enumerate(sorted_branches):
            prize = prizes[i] if i < 3 else ""
            
            ws.cell(row=row, column=1, value=branch_stats.name)
            ws.cell(row=row, column=2, value=branch_stats.total_checks)
            ws.cell(row=row, column=3, value=round(branch_stats.average_score, 2))
            ws.cell(row=row, column=4, value=prize)
            
            # –í—ã–¥–µ–ª—è–µ–º —Ç–æ–ø-3 –∂–µ–ª—Ç—ã–º
            if i < 3:
                for col in range(1, 5):
                    ws.cell(row=row, column=col).fill = PatternFill(
                        start_color="FFD700", end_color="FFD700", fill_type="solid"
                    )
            
            row += 1
        
        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        self._adjust_column_widths(ws)
    
    def _create_branches_details_sheet(self, wb: Workbook) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É '–î–µ—Ç–∞–ª–∏ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º' —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞."""
        ws = wb.create_sheet("–î–µ—Ç–∞–ª–∏ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º")
        
        row = 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–ª–∏–∞–ª—ã –ø–æ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–µ
        sorted_branches = sorted(
            self.branches_stats.values(),
            key=lambda x: x.average_score,
            reverse=True
        )
        
        for branch_idx, branch_stats in enumerate(sorted_branches):
            branch_name = branch_stats.name
            branch_avg = branch_stats.average_score
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∏–ª–∏–∞–ª–∞ (–∫—Ä—É–ø–Ω—ã–π, –∂–∏—Ä–Ω—ã–π)
            branch_header = f"üè¢ {branch_name}  ‚Ä¢  –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {round(branch_avg, 2)}"
            cell = ws.cell(row=row, column=1, value=branch_header)
            cell.font = Font(bold=True, size=14)
            cell.fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
            cell.font = Font(bold=True, size=14, color="FFFFFF")
            cell.alignment = Alignment(horizontal="left")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ (4 –∫–æ–ª–æ–Ω–∫–∏)
            ws.merge_cells(start_row=row, start_column=1, end_row=row, end_column=4)
            row += 1
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            headers = [
                "üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",
                "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫",
                "‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞",
                "üìà –†–∞–Ω–≥"
            ]
            
            for col, header in enumerate(headers, 1):
                cell = ws.cell(row=row, column=col, value=header)
                cell.font = Font(bold=True)
                cell.fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")
                cell.alignment = Alignment(horizontal="center")
            
            row += 1
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
            teachers_in_branch = []
            
            for teacher_name, teacher_stats in self.teachers_stats.items():
                scores_in_branch = teacher_stats.checks_by_branch.get(branch_name, [])
                if scores_in_branch:
                    avg_score = sum(scores_in_branch) / len(scores_in_branch)
                    teachers_in_branch.append({
                        "name": teacher_name,
                        "checks": len(scores_in_branch),
                        "avg_score": avg_score
                    })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–µ (—É–±—ã–≤–∞–Ω–∏–µ)
            teachers_in_branch.sort(key=lambda x: x["avg_score"], reverse=True)
            
            # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            for rank, teacher_info in enumerate(teachers_in_branch, 1):
                ws.cell(row=row, column=1, value=teacher_info["name"])
                ws.cell(row=row, column=2, value=teacher_info["checks"])
                ws.cell(row=row, column=3, value=round(teacher_info["avg_score"], 2))
                ws.cell(row=row, column=4, value=rank)
                
                # –í—ã–¥–µ–ª—è–µ–º —Ç–æ–ø-3 –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∏–ª–∏–∞–ª–µ –∂–µ–ª—Ç—ã–º
                if rank <= 3:
                    for col in range(1, 5):
                        ws.cell(row=row, column=col).fill = PatternFill(
                            start_color="FFD700", end_color="FFD700", fill_type="solid"
                        )
                
                row += 1
            
            # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ñ–∏–ª–∏–∞–ª–∞–º–∏
            row += 1
        
        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        self._adjust_column_widths(ws)
    
    def _create_rankings_sheet(self, wb: Workbook) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É '–†–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –∏ –∫—É—Ä—Å–∞–º'."""
        ws = wb.create_sheet("–†–µ–π—Ç–∏–Ω–≥–∏")
        
        row = 1
        
        # –†–∞–∑–¥–µ–ª 1: –†–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        row = self._add_ranking_section(
            ws, row, 
            "üìä –†–ï–ô–¢–ò–ù–ì –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú",
            "checks_by_category"
        )
        row += 2
        
        # –†–∞–∑–¥–µ–ª 2: –†–µ–π—Ç–∏–Ω–≥ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º
        row = self._add_ranking_section(
            ws, row,
            "üìä –†–ï–ô–¢–ò–ù–ì –ü–û –ü–†–û–ì–†–ê–ú–ú–ê–ú",
            "checks_by_program"
        )
        row += 2
        
        # –†–∞–∑–¥–µ–ª 3: –†–µ–π—Ç–∏–Ω–≥ –ø–æ –∫—É—Ä—Å–∞–º
        row = self._add_ranking_section(
            ws, row,
            "üìä –†–ï–ô–¢–ò–ù–ì –ü–û –ö–£–†–°–ê–ú",
            "checks_by_course"
        )
        
        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        self._adjust_column_widths(ws)
    
    def _add_ranking_section(self, ws, start_row: int, section_title: str, attribute_name: str) -> int:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–µ–∫—Ü–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞ (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º/–ø—Ä–æ–≥—Ä–∞–º–º–∞–º/–∫—É—Ä—Å–∞–º)."""
        current_row = start_row
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        ws.cell(row=current_row, column=1, value=section_title)
        ws.cell(row=current_row, column=1).font = Font(bold=True, size=14, color="0066CC")
        ws.merge_cells(f'A{current_row}:D{current_row}')
        current_row += 2
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø—Ä–æ–≥—Ä–∞–º–º—ã/–∫—É—Ä—Å—ã)
        groups = defaultdict(list)
        
        for teacher_name, teacher_stats in self.teachers_stats.items():
            checks_by_group = getattr(teacher_stats, attribute_name)
            
            for group_name, scores in checks_by_group.items():
                if scores:
                    avg_score = sum(scores) / len(scores)
                    groups[group_name].append({
                        "teacher": teacher_name,
                        "avg_score": avg_score,
                        "checks": len(scores)
                    })
        
        # –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –≤—ã–≤–æ–¥–∏–º —Ä–µ–π—Ç–∏–Ω–≥
        for group_name in sorted(groups.keys()):
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã
            ws.cell(row=current_row, column=1, value=f"–ì—Ä—É–ø–ø–∞: {group_name}")
            ws.cell(row=current_row, column=1).font = Font(bold=True, size=11)
            current_row += 1
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            headers = ["üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", "‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫"]
            for col, header in enumerate(headers, 1):
                cell = ws.cell(row=current_row, column=col, value=header)
                cell.font = Font(bold=True)
                cell.fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")
            current_row += 1
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–µ
            teachers_list = sorted(groups[group_name], key=lambda x: x["avg_score"], reverse=True)
            
            # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            for rank, teacher_info in enumerate(teachers_list):
                ws.cell(row=current_row, column=1, value=teacher_info["teacher"])
                ws.cell(row=current_row, column=2, value=round(teacher_info["avg_score"], 2))
                ws.cell(row=current_row, column=3, value=teacher_info["checks"])
                
                # –í—ã–¥–µ–ª—è–µ–º —Ç–æ–ø-3 –∂–µ–ª—Ç—ã–º
                if rank < 3:
                    for col in range(1, 4):
                        ws.cell(row=current_row, column=col).fill = PatternFill(
                            start_color="FFD700", end_color="FFD700", fill_type="solid"
                        )
                
                current_row += 1
            
            # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
            current_row += 1
        
        return current_row
    
    def _adjust_column_widths(self, ws) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–≤—Ç–æ—à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫."""
        for column in ws.columns:
            max_length = 0
            column_letter = None
            for cell in column:
                if hasattr(cell, 'column_letter'):
                    if column_letter is None:
                        column_letter = cell.column_letter
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
            if column_letter:
                adjusted_width = min(max_length + 2, 30)
                ws.column_dimensions[column_letter].width = adjusted_width
    
    async def run_analysis(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö."""
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ output –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        output_config = self.config.get("output", {})
        reports_dir = Path(output_config.get("directory", "reports"))
        reports_dir.mkdir(exist_ok=True)
        
        report_name = self.config.get("report_name", "–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–∞–º —É—Ä–æ–∫–æ–≤")
        print(f"{'=' * 80}")
        print(f"  {report_name}")
        print(f"{'=' * 80}")
        print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É
        await self.analyze_form_697550()
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print()
        print("=" * 80)
        print("–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 80)
        print(f"–í—Å–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–æ–≤ –≤ –æ—Ç—á–µ—Ç–µ: {len(self.branches_stats)}")
        print(f"–í—Å–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ç—á–µ—Ç–µ: {len(self.teachers_stats)}")
        print(f"–í—Å–µ–≥–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {self.valid_tasks_count}")
        print()
        print("–ò–°–ö–õ–Æ–ß–ï–ù–û:")
        print(f"  ‚Ä¢ –ü–æ –ø–µ—Ä–∏–æ–¥—É: {self.excluded_by_period_count}")
        print(f"  ‚Ä¢ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {self.excluded_teachers_count}")
        print(f"  ‚Ä¢ –§–∏–ª–∏–∞–ª–æ–≤: {self.excluded_branches_count}")
        print(f"  ‚Ä¢ –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫: {self.invalid_score_count}")
        print("=" * 80)
        print()
        
        # –°–æ–∑–¥–∞–µ–º Excel –æ—Ç—á–µ—Ç
        filename_prefix = output_config.get("filename_prefix", "lesson_checks_report")
        add_timestamp = output_config.get("add_timestamp", True)
        
        if add_timestamp:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{reports_dir}/{filename_prefix}_{timestamp}.xlsx"
        else:
            filename = f"{reports_dir}/{filename_prefix}.xlsx"
        
        self.create_excel_reports(filename)
        
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    try:
        analyzer = LessonChecksAnalyzer()
        await analyzer.run_analysis()
    except KeyboardInterrupt:
        print("\n–û—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        sys.exit(1)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not os.getenv("PYRUS_LOGIN") or not os.getenv("PYRUS_SECURITY_KEY"):
        print("–û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è PYRUS_LOGIN –∏ PYRUS_SECURITY_KEY")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ .env —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        sys.exit(1)
    
    asyncio.run(main())

