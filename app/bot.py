#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ Pyrus
–≠—Ç–∞–ø 5: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã, —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
"""
import asyncio
import os
import json
import logging
from datetime import datetime
from typing import List, Optional, Dict, Any
import httpx
from dotenv import load_dotenv

# Telegram Bot API
from telegram import (
    Update, 
    ReplyKeyboardMarkup, 
    KeyboardButton,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    ContextTypes,
    filters
)
from telegram.error import TelegramError, RetryAfter, TimedOut

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
from .db import db
from .utils import normalize_phone_e164
from .pyrus_client import PyrusClient

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = [int(x.strip()) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip()]
QUEUE_TOP_N = int(os.getenv("QUEUE_TOP_N", "10"))

# Pyrus API
PYRUS_API_URL = os.getenv("PYRUS_API_URL", "https://api.pyrus.com/v4/")
PYRUS_LOGIN = os.getenv("PYRUS_LOGIN")
PYRUS_SECURITY_KEY = os.getenv("PYRUS_SECURITY_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class PyrusTelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è Pyrus —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        if not BOT_TOKEN:
            raise ValueError("BOT_TOKEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        
        self.application = Application.builder().token(BOT_TOKEN).build()
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.cmd_start))
        self.application.add_handler(CommandHandler("whoami", self.cmd_whoami))
        self.application.add_handler(CommandHandler("link", self.cmd_link))
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("enable_all", self.cmd_enable_all))
        self.application.add_handler(CommandHandler("disable_all", self.cmd_disable_all))
        self.application.add_handler(CommandHandler("users", self.cmd_users))
        self.application.add_handler(CommandHandler("queue", self.cmd_queue))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        self.application.add_handler(MessageHandler(filters.CONTACT, self.handle_contact))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    # === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ===
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id = update.effective_chat.id
        user = update.effective_user
        
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (chat_id: {chat_id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = db.get_user_by_telegram_id(chat_id)
        if existing_user:
            await update.message.reply_text(
                f"üéâ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
                f"üë§ {existing_user.full_name or f'User {existing_user.user_id}'}\n"
                f"üÜî Pyrus ID: {existing_user.user_id}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {existing_user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /whoami –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
            )
            return
        
        # –ü—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        contact_keyboard = ReplyKeyboardMarkup(
            [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
        
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Pyrus!\n\n"
            "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. "
            "–ú—ã –Ω–∞–π–¥—ë–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ Pyrus –∏ —Å–≤—è–∂–µ–º —Å —ç—Ç–∏–º —á–∞—Ç–æ–º.\n\n"
            "üîí –í–∞—à –Ω–æ–º–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Pyrus.",
            reply_markup=contact_keyboard
        )
    
    async def handle_contact(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        contact = update.message.contact
        chat_id = update.effective_chat.id
        
        logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç chat_id {chat_id}")
        logger.info(f"üìû –ò—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä: {contact.phone_number}")
        
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await update.message.reply_text(
            "üìû –ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è—é –≤ Pyrus...",
            reply_markup=ReplyKeyboardRemove()
        )
        
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
            normalized_phone = normalize_phone_e164(contact.phone_number)
            logger.info(f"üîß –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {normalized_phone}")
            
            if not normalized_phone:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä: {contact.phone_number}")
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —Å /start"
                )
                return
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Pyrus
            pyrus_user = await self._find_user_in_pyrus(normalized_phone)
            if not pyrus_user:
                await update.message.reply_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {normalized_phone} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Pyrus.\n\n"
                    f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                    f"‚Ä¢ –ù–æ–º–µ—Ä —É–∫–∞–∑–∞–Ω –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ Pyrus\n"
                    f"‚Ä¢ –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–∏—Å—Ç–µ–º—ã\n\n"
                    f"–ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ —á–µ—Ä–µ–∑ /link"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            user_record = db.upsert_user(
                user_id=pyrus_user['id'],
                telegram_id=chat_id,
                phone=normalized_phone,
                full_name=pyrus_user.get('full_name')
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            db.log_event("user_registered", {
                "user_id": pyrus_user['id'],
                "telegram_id": chat_id,
                "phone": normalized_phone,
                "full_name": pyrus_user.get('full_name')
            })
            
            user_name = pyrus_user.get('full_name') or f"User {pyrus_user['id']}"
            await update.message.reply_text(
                f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üë§ {user_name}\n"
                f"üÜî Pyrus ID: {pyrus_user['id']}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {normalized_phone}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö."
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    async def cmd_whoami(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /whoami - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        chat_id = update.effective_chat.id
        
        user = db.get_user_by_telegram_id(chat_id)
        if not user:
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return
        
        await update.message.reply_text(
            f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ:\n\n"
            f"üÜî Pyrus ID: {user.user_id}\n"
            f"üë®‚Äçüíº –ò–º—è: {user.full_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üóì –û–±–Ω–æ–≤–ª—ë–Ω: {user.updated_at.strftime('%d.%m.%Y %H:%M') if user.updated_at else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
        )
    
    async def cmd_link(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /link <user_id> - —Ä—É—á–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞"""
        chat_id = update.effective_chat.id
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ Pyrus user_id. –ü—Ä–∏–º–µ—Ä: /link 12345"
            )
            return
        
        try:
            user_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: /link 12345"
            )
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç user_id
            existing_user = db.get_user(user_id)
            if existing_user and existing_user.telegram_id != chat_id:
                await update.message.reply_text(
                    f"‚ùå Pyrus user_id {user_id} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Telegram –∞–∫–∫–∞—É–Ω—Ç—É."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É
            user_record = db.upsert_user(
                user_id=user_id,
                telegram_id=chat_id,
                full_name=f"User {user_id} (manual link)"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            db.log_event("user_linked_manual", {
                "user_id": user_id,
                "telegram_id": chat_id
            })
            
            await update.message.reply_text(
                f"‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"üÜî Pyrus ID: {user_id}\n"
                f"üì± Telegram: {chat_id}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ {user_id} -> {chat_id}: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—è–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    # === –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ===
    
    def _is_admin(self, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return chat_id in ADMIN_IDS
    
    async def cmd_enable_all(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /enable_all - –≤–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        chat_id = update.effective_chat.id
        
        if not self._is_admin(chat_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
        
        try:
            db.settings_set('service_enabled', 'true')
            db.log_event("service_enabled", {"admin_chat_id": chat_id})
            
            await update.message.reply_text(
                "‚úÖ –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –í–ö–õ–Æ–ß–Å–ù\n\n"
                "üì¨ –í–æ—Ä–∫–µ—Ä –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∞–¥–º–∏–Ω–æ–º {chat_id}: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞.")
    
    async def cmd_disable_all(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /disable_all - –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        chat_id = update.effective_chat.id
        
        if not self._is_admin(chat_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
        
        try:
            db.settings_set('service_enabled', 'false')
            db.log_event("service_disabled", {"admin_chat_id": chat_id})
            
            await update.message.reply_text(
                "‚è∏Ô∏è –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –û–¢–ö–õ–Æ–ß–Å–ù\n\n"
                "üì• –û—á–µ—Ä–µ–¥—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –Ω–∞–ø–æ–ª–Ω—è—Ç—å—Å—è, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∞–¥–º–∏–Ω–æ–º {chat_id}: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞.")
    
    async def cmd_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /users - —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        chat_id = update.effective_chat.id
        
        if not self._is_admin(chat_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
        
        try:
            users = db.get_all_users()
            
            if not users:
                await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return
            
            lines = ["üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"]
            
            for i, user in enumerate(users, 1):
                lines.append(
                    f"{i}. {user.full_name or f'User {user.user_id}'}\n"
                    f"   üÜî Pyrus: {user.user_id} | TG: {user.telegram_id}\n"
                    f"   üì± {user.phone or '—Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'}"
                )
            
            message = "\n\n".join(lines)
            
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º
            if len(message) > 4000:
                message = message[:4000] + f"\n\n... –∏ –µ—â—ë {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–æ–º {chat_id}: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    
    async def cmd_queue(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /queue - —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å—Ä–æ—á–∫–æ–π"""
        chat_id = update.effective_chat.id
        
        if not self._is_admin(chat_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
        
        try:
            stats = db.get_queue_stats(QUEUE_TOP_N)
            
            if not stats:
                await update.message.reply_text("üì≠ –û—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—É—Å—Ç–∞")
                return
            
            lines = [f"üìä –¢–û–ü-{QUEUE_TOP_N} –ø—Ä–æ—Å—Ä–æ—á–µ–∫:\n"]
            
            for i, stat in enumerate(stats, 1):
                hours = int(stat['max_hours_overdue'])
                lines.append(
                    f"{i}) {stat['full_name']} ‚Äî –º–∞–∫—Å –ø—Ä–æ—Å—Ä–æ—á–∫–∞: {hours} —á, –∑–∞–¥–∞—á: {stat['task_count']}"
                )
            
            message = "\n".join(lines)
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–æ–º {chat_id}: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏.")
    
    # === –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° PYRUS API ===
    
    async def _find_user_in_pyrus(self, phone: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Pyrus –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        
        Args:
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ E.164
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None
        """
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone}")
            
            # –ü–æ–ª—É—á–∞–µ–º access_token
            access_token = await self._get_pyrus_access_token()
            if not access_token:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access_token –¥–ª—è Pyrus API")
                return None
            
            logger.info("‚úÖ Access token –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            headers = {
                "Authorization": f"Bearer {access_token}",
                "Content-Type": "application/json"
            }
            
            search_url = f"{PYRUS_API_URL}members"
            search_params = {"mobile_phone": phone}
            logger.info(f"üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: GET {search_url}?mobile_phone={phone}")
            
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    search_url,
                    headers=headers,
                    params=search_params
                )
                
                logger.info(f"üì° –û—Ç–≤–µ—Ç API: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                
                if response.status_code != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Pyrus: {response.status_code} {response.text}")
                    return None
                
                data = response.json()
                members = data.get('members', [])
                
                logger.info(f"üìä API –≤–µ—Ä–Ω—É–ª {len(members)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                if not members:
                    logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Pyrus")
                    return None
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                logger.info("üë• –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
                matching_users = []
                
                for i, member in enumerate(members):
                    full_name = f"{member.get('first_name', '')} {member.get('last_name', '')}".strip()
                    logger.info(f"  {i+1}. ID: {member['id']}, –ò–º—è: {full_name}")
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_phones = []
                    if 'mobile_phone' in member and member['mobile_phone']:
                        user_phones.append(member['mobile_phone'])
                        logger.info(f"     –ú–æ–±–∏–ª—å–Ω—ã–π: {member['mobile_phone']}")
                    if 'phone' in member and member['phone']:
                        user_phones.append(member['phone'])
                        logger.info(f"     –¢–µ–ª–µ—Ñ–æ–Ω: {member['phone']}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∏—Å–∫–æ–º—ã–º –Ω–æ–º–µ—Ä–æ–º
                    phone_match = False
                    for user_phone in user_phones:
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
                        normalized_user_phone = normalize_phone_e164(user_phone)
                        if normalized_user_phone == phone:
                            phone_match = True
                            logger.info(f"     ‚úÖ –ù–ê–ô–î–ï–ù–û –°–û–í–ü–ê–î–ï–ù–ò–ï: {user_phone} -> {normalized_user_phone}")
                            break
                    
                    if phone_match:
                        matching_users.append(member)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                if not matching_users:
                    logger.warning(f"‚ùå –°—Ä–µ–¥–∏ {len(members)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ù–ï–¢ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å –Ω–æ–º–µ—Ä–æ–º {phone}")
                    logger.warning("üîç API –≤–µ—Ä–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–æ –Ω–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –∏—Å–∫–æ–º–æ–≥–æ –Ω–æ–º–µ—Ä–∞!")
                    return None
                elif len(matching_users) > 1:
                    logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(matching_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º!")
                    for i, user in enumerate(matching_users):
                        logger.warning(f"   {i+1}. ID: {user['id']}, –ò–º—è: {user.get('first_name', '')} {user.get('last_name', '')}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º –Ω–æ–º–µ—Ä–æ–º
                member = matching_users[0]
                selected_user = {
                    'id': member['id'],
                    'full_name': f"{member.get('first_name', '')} {member.get('last_name', '')}".strip()
                }
                
                logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º –Ω–æ–º–µ—Ä–æ–º: {selected_user}")
                return selected_user
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Pyrus: {e}")
            return None
    
    async def _get_pyrus_access_token(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ access_token –¥–ª—è Pyrus API —á–µ—Ä–µ–∑ –æ–±—â–∏–π PyrusClient.
        –ó–∞—á–µ–º: —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∏ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω.
        """
        try:
            client = PyrusClient()
            return await client.get_token()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ access_token —á–µ—Ä–µ–∑ PyrusClient: {e}")
            return None
    
    # === –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===
    
    async def send_notification(self, telegram_id: int, message: str, retries: int = 3) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ —Ä–µ—Ç—Ä–∞—è–º–∏
        
        Args:
            telegram_id: ID —á–∞—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            retries: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –∏–Ω–∞—á–µ
        """
        for attempt in range(retries):
            try:
                await self.application.bot.send_message(
                    chat_id=telegram_id,
                    text=message
                )
                return True
                
            except RetryAfter as e:
                # Rate limiting - –∂–¥—ë–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                wait_time = e.retry_after
                logger.warning(f"Rate limit –¥–ª—è {telegram_id}, –∂–¥—ë–º {wait_time}—Å")
                await asyncio.sleep(wait_time)
                
            except TimedOut:
                # –¢–∞–π–º–∞—É—Ç - –∂–¥—ë–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                wait_time = [1, 3, 9][attempt] if attempt < 3 else 9
                logger.warning(f"–¢–∞–π–º–∞—É—Ç –¥–ª—è {telegram_id}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retries}, –∂–¥—ë–º {wait_time}—Å")
                await asyncio.sleep(wait_time)
                
            except TelegramError as e:
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ Telegram
                logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {telegram_id}: {e}")
                if "chat not found" in str(e).lower() or "blocked" in str(e).lower():
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ - –Ω–µ —Ä–µ—Ç—Ä–∞–∏–º
                    return False
                
                wait_time = [1, 3, 9][attempt] if attempt < 3 else 9
                await asyncio.sleep(wait_time)
                
            except Exception as e:
                # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {telegram_id}: {e}")
                wait_time = [1, 3, 9][attempt] if attempt < 3 else 9
                await asyncio.sleep(wait_time)
        
        # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {telegram_id} –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫")
        return False
    
    # === –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ===
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –ë–î
        db.log_event("bot_error", {
            "error": str(context.error),
            "update": str(update) if update else None
        })
    
    # === –ó–ê–ü–£–°–ö ===
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (PTB v20+): –∏—Å–ø–æ–ª—å–∑—É–µ–º run_polling –±–µ–∑ Updater.
        –ó–∞—á–µ–º: —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å v20 –∏ —É–ø—Ä–æ—â–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞.
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        logger.info(f"üë• –ê–¥–º–∏–Ω—ã: {ADMIN_IDS}")
        try:
            await self.application.run_polling(close_loop=False)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise
    
    async def shutdown(self):
        """Graceful shutdown –±–æ—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
        try:
            await self.application.stop()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = PyrusTelegramBot()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –º–æ–¥—É–ª–µ–π
async def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        await bot.start_polling()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        bot.stop()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        bot.stop()


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Pyrus")
    print("=" * 50)
    asyncio.run(run_bot())
