"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ñ–æ—Ä–º—ã 2304918:
- —Å–ª–æ—Ç today21: target_day = —Å–µ–≥–æ–¥–Ω—è
- —Å–ª–æ—Ç yesterday12: target_day = –≤—á–µ—Ä–∞

–î–µ–ª–∞–µ—Ç:
- —á–∏—Ç–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã (–∏–º—è, –ø–æ–ª—è)
- –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ä–µ–µ—Å—Ç—Ä (—Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ)
- –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
- –∞–¥—Ä–µ—Å—É–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –ø–æ –§–ò–û (—Ñ–∞–∑–∑–∏-–ø–æ–∏—Å–∫) –∏–ª–∏ –∞–¥–º–∏–Ω—É
- —Å—Ç–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π pending —á–µ—Ä–µ–∑ db.log_event (–¥–ª—è –Ω–∞—á–∞–ª–∞ ‚Äî —Ç–æ–ª—å–∫–æ –ª–æ–≥)

–í–∞–∂–Ω–æ: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –æ—á–µ—Ä–µ–¥—å—é pending –¥–ª—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–±–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —à–∞–≥–æ–º
–ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫).
"""

from __future__ import annotations

import os
from datetime import datetime, timedelta
from typing import Any, Dict, List, Tuple

import pytz

from ..db import db
from ..pyrus_client import PyrusClient
from ..rules.form_2304918 import check_rules, TEACHER_ID, TEACHER_RULE3_ID, _get_field_value


def _tz_now(tz_name: str) -> datetime:
    return datetime.now(pytz.timezone(tz_name))


def _target_day_str(now_local: datetime, slot: str) -> str:
    if slot == "today21":
        d = now_local.date()
    else:
        d = (now_local - timedelta(days=1)).date()
    return d.isoformat()


def _build_fields_meta(form_meta: Dict[str, Any]) -> Dict[int, Dict[str, Any]]:
    out: Dict[int, Dict[str, Any]] = {}
    for f in form_meta.get("fields", []) or []:
        fid = f.get("id")
        if isinstance(fid, int):
            out[fid] = {"name": f.get("name"), "type": f.get("type")}
    return out


def _extract_teacher_full_name(task_fields: List[Dict[str, Any]], field_id: int = TEACHER_ID) -> str:
    """–ù–∞–¥—ë–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ–ª—è TEACHER_ID, —É—á–∏—Ç—ã–≤–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏.

    –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ rules._get_field_value, –∑–∞—Ç–µ–º –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç.
    """
    v = _get_field_value(task_fields, field_id)
    if isinstance(v, dict):
        return str(v.get("text") or v.get("value") or v.get("name") or "").strip()
    if isinstance(v, str):
        return v.strip()
    return ""


def _extract_teacher_user_id(task_fields: List[Dict[str, Any]], field_id: int = TEACHER_ID) -> int | None:
    """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∞—Ç—å Pyrus user_id –∏–∑ –ø–æ–ª—è TEACHER_ID.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã:
    - dict —Å –∫–ª—é—á–∞–º–∏ id / user_id / value (int –∏–ª–∏ str-—á–∏—Å–ª–æ)
    - –ø—Ä—è–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ int/str –≤ –ø–æ–ª–µ
    """
    v = _get_field_value(task_fields, field_id)
    if isinstance(v, dict):
        for k in ("id", "user_id", "value"):
            val = v.get(k)
            if isinstance(val, int):
                return val
            if isinstance(val, str) and val.isdigit():
                return int(val)
    if isinstance(v, int):
        return v
    if isinstance(v, str) and v.isdigit():
        return int(v)
    return None


def _fuzzy_find_user_by_full_name(candidate: str, threshold: float = 0.85) -> Tuple[str, int] | Tuple[None, None]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (full_name, user_id) –∏–ª–∏ (None, None) –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ 1 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è.
    –ü—Ä–æ—Å—Ç–µ–π—à–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é/ratio —É–ø—Ä–æ—â—ë–Ω–Ω–æ.
    –î–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ–≥–æ –æ–¥–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –∏–Ω–∞—á–µ –≤–µ—Ä–Ω—ë–º None.
    """
    if not candidate:
        return (None, None)
    try:
        users = db.get_all_users()
        cand = candidate.lower().replace(" ", "")
        best = []
        for u in users:
            name = (u.full_name or "").lower().replace(" ", "")
            if not name:
                continue
            # –ø—Ä–æ—Å—Ç–µ–π—à–∏–π ratio: –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ / –º–∞–∫—Å–∏–º—É–º –¥–ª–∏–Ω—ã
            inter = len(set(cand) & set(name))
            denom = max(len(cand), len(name)) or 1
            ratio = inter / denom
            if ratio >= threshold:
                best.append((ratio, u.full_name, u.user_id))
        if len(best) == 1:
            _, full_name, user_id = best[0]
            return (full_name, user_id)
        else:
            return (None, None)
    except Exception:
        return (None, None)


def _format_today_message(task_title: str, task_id: int, errors: List[str]) -> str:
    """–î—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å —ç–º–æ–¥–∂–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞."""
    import os as _os
    limit = int(_os.getenv("TRUNC_TASK_TITLE_LEN", "50"))
    title_short = (task_title or "–ó–∞–¥–∞—á–∞")[:limit]

    bullet = "‚Ä¢"  # –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –º–∞—Ä–∫–∞ —Å–ø–∏—Å–∫–∞
    lines = [
        f"üëã –ü—Ä–∏–≤–µ—Ç! –í –∑–∞–¥–∞—á–µ ¬´{title_short}¬ª —Å–µ–≥–æ–¥–Ω—è –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –¥–µ–ª–∞:",
        "",
    ]
    for i, e in enumerate(errors):
        lines.append(f"{bullet} {e}")
        if i != len(errors) - 1:
            lines.append("")
    lines.append("")
    lines.append(f"üîó –°—Å—ã–ª–∫–∞: https://pyrus.com/t#id{task_id}")
    return "\n".join(lines)


def _format_yesterday_message(task_title: str, task_id: int, errors: List[str]) -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–≤–æ–¥–∫–∏ –∑–∞ –≤—á–µ—Ä–∞ (—Å–ª–æ—Ç yesterday12)."""
    import os as _os
    limit = int(_os.getenv("TRUNC_TASK_TITLE_LEN", "50"))
    title_short = (task_title or "–ó–∞–¥–∞—á–∞")[:limit]

    bullet = "‚Ä¢"
    lines = [
        f"üëã –ü—Ä–∏–≤–µ—Ç! –í –∑–∞–¥–∞—á–µ ¬´{title_short}¬ª –≤—á–µ—Ä–∞ –±—ã–ª–∏ –Ω–µ–±–æ–ª—å—à–∏–µ –¥–µ–ª–∞:",
        "",
    ]
    for i, e in enumerate(errors):
        lines.append(f"{bullet} {e}")
        if i != len(errors) - 1:
            lines.append("")
    lines.append("")
    lines.append(f"üîó –°—Å—ã–ª–∫–∞: https://pyrus.com/t#id{task_id}")
    return "\n".join(lines)


def _format_noon_header(form_name: str) -> str:
    return f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–µ–±–æ–ª—å—à–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –≤—á–µ—Ä–∞—à–Ω–∏–º –∑–∞–¥–∞—á–∞–º —Ñ–æ—Ä–º—ã ¬´{form_name}¬ª:\n"


async def run_slot(slot: str) -> None:
    """
    –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞: "today21" –∏–ª–∏ "yesterday12".
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏–∑ FORM_ID=2304918,792300
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    form_ids_str = os.getenv("FORM_ID", "2304918")
    if "," in form_ids_str:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        await run_slot_multi(slot)
        return
    
    # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–¥–Ω–æ–π —Ñ–æ—Ä–º—ã
    tz = os.getenv("TZ", "Asia/Yekaterinburg")
    form_id = int(form_ids_str.strip())

    now_local = _tz_now(tz)
    target = _target_day_str(now_local, slot)

    client = PyrusClient()
    form_meta = await client.get_form_meta(form_id)
    if not form_meta:
        db.log_event("form_meta_error", {"slot": slot, "form_id": form_id})
        return

    fields_meta = _build_fields_meta(form_meta)
    form_name = form_meta.get("name") or f"–§–æ—Ä–º–∞ {form_id}"

    # –°–±–æ—Ä –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º (–¥–ª—è noon)
    per_teacher: Dict[int, List[Tuple[int, str]]] = {}
    ambiguous_to_admin: List[Tuple[str, int, List[str]]] = []

    async for t in client.iter_register_tasks(form_id, include_archived=False):
        task_id = t.get("id") or t.get("task_id")
        task_fields = t.get("fields") or []
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: subject ‚Üí text
        task_title = (t.get("subject") or t.get("text") or "").strip()
        # –§–æ–ª–±—ç–∫: –ø–æ–ª–µ id=1 (title) –≤ fields, –µ—Å–ª–∏ subject/text –ø—É—Å—Ç—ã
        if not task_title:
            for f in task_fields or []:
                if f.get("id") == 1:
                    val = f.get("value") or {}
                    # –ë–µ—Ä—ë–º —Ä–µ–∞–ª—å–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    if isinstance(val, dict):
                        task_title = str(val.get("text") or val.get("value") or val.get("name") or f.get("name") or "–ó–∞–¥–∞—á–∞").strip()
                    elif isinstance(val, str):
                        task_title = val.strip() or (f.get("name") or "–ó–∞–¥–∞—á–∞").strip()
                    else:
                        task_title = (f.get("name") or "–ó–∞–¥–∞—á–∞").strip()
                    break

        errors_map = check_rules(fields_meta, task_fields, target, slot)
        general_errors = errors_map.get("general") or []
        rule3_errors = errors_map.get("rule3") or []
        if not general_errors and not rule3_errors:
            continue

        _fmt = _format_today_message if slot == "today21" else _format_yesterday_message

        # 1) –û–±—â–∏–µ –æ—à–∏–±–∫–∏ ‚Üí –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å (TEACHER_ID)
        if general_errors:
            teacher_user_id = _extract_teacher_user_id(task_fields, TEACHER_ID)
            if isinstance(teacher_user_id, int):
                try:
                    user_obj = db.get_user(int(teacher_user_id))
                except Exception:
                    user_obj = None
                if user_obj:
                    per_teacher.setdefault(teacher_user_id, []).append((task_id, _fmt(task_title or "–ó–∞–¥–∞—á–∞", task_id, general_errors)))
                else:
                    teacher_name = _extract_teacher_full_name(task_fields, TEACHER_ID)
                    ambiguous_to_admin.append((teacher_name or "", task_id, general_errors))
            else:
                teacher_name = _extract_teacher_full_name(task_fields, TEACHER_ID)
                full_name, user_id = _fuzzy_find_user_by_full_name(teacher_name, threshold=0.85)
                if full_name and user_id:
                    per_teacher.setdefault(user_id, []).append((task_id, _fmt(task_title or "–ó–∞–¥–∞—á–∞", task_id, general_errors)))
                else:
                    ambiguous_to_admin.append((teacher_name or "", task_id, general_errors))

        # 2) –û—à–∏–±–∫–∏ –ø—Ä–∞–≤–∏–ª–∞ 3 ‚Üí –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏–∑ –ø–æ–ª—è 49 (TEACHER_RULE3_ID)
        if rule3_errors:
            teacher_user_id_r3 = _extract_teacher_user_id(task_fields, TEACHER_RULE3_ID)
            if isinstance(teacher_user_id_r3, int):
                try:
                    user_obj_r3 = db.get_user(int(teacher_user_id_r3))
                except Exception:
                    user_obj_r3 = None
                if user_obj_r3:
                    per_teacher.setdefault(teacher_user_id_r3, []).append((task_id, _fmt(task_title or "–ó–∞–¥–∞—á–∞", task_id, rule3_errors)))
                else:
                    teacher_name_r3 = _extract_teacher_full_name(task_fields, TEACHER_RULE3_ID)
                    ambiguous_to_admin.append((teacher_name_r3 or "", task_id, rule3_errors))
            else:
                teacher_name_r3 = _extract_teacher_full_name(task_fields, TEACHER_RULE3_ID)
                full_name_r3, user_id_r3 = _fuzzy_find_user_by_full_name(teacher_name_r3, threshold=0.85)
                if full_name_r3 and user_id_r3:
                    per_teacher.setdefault(user_id_r3, []).append((task_id, _fmt(task_title or "–ó–∞–¥–∞—á–∞", task_id, rule3_errors)))
                else:
                    ambiguous_to_admin.append((teacher_name_r3 or "", task_id, rule3_errors))

    # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –Ω–∞—à–ª–∏ (–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ ‚Äî –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ pending)
    db.log_event("form_check_summary", {
        "slot": slot,
        "form_id": form_id,
        "form_name": form_name,
        "teachers_found": len(per_teacher),
        "ambiguous": len(ambiguous_to_admin),
    })
    print(f"[form_checks] slot={slot} form='{form_name}' teachers_found={len(per_teacher)} ambiguous={len(ambiguous_to_admin)}")

    # –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    # today21 ‚Äî –ø–æ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ = –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ; yesterday12 ‚Äî –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–ª–∏ –±—ã,
    # –Ω–æ –≤ —Ä–∞–º–∫–∞—Ö –æ—á–µ—Ä–µ–¥–∏ –∫–ª–∞–¥—ë–º –ø–æ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–¥–∞—á—É, –∞ –≤–æ—Ä–∫–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.
    import hashlib
    # –ß–∏—Ç–∞–µ–º ADMIN_IDS –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–º–ø–æ—Ä—Ç–∞ bot –∏ —Å–∞–π–¥-—ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    admin_ids_env = os.getenv("ADMIN_IDS", "")
    ADMIN_IDS = [int(x.strip()) for x in admin_ids_env.split(",") if x.strip().isdigit()]
    import pytz

    tz = pytz.timezone(os.getenv("TZ", "Asia/Yekaterinburg"))
    send_at = _tz_now(tz.zone)

    for user_id, msgs in per_teacher.items():
        for task_id, text in msgs:
            h = hashlib.sha256((slot + str(task_id) + str(user_id) + text).encode("utf-8")).hexdigest()
            try:
                db.enqueue_preformatted(
                    task_id=int(task_id),
                    user_id=int(user_id),
                    send_at=send_at.astimezone(pytz.UTC).replace(tzinfo=None),
                    slot=slot,
                    message_text=text,
                    dedupe_hash=h,
                )
            except Exception as e:
                db.log_event("enqueue_error", {"user_id": user_id, "task_id": task_id, "error": str(e)})

    # –§–æ–ª–±—ç–∫: –æ–¥–∏–Ω –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    admin_ids = ADMIN_IDS or []
    if admin_ids:
        # –ü–æ–¥—Å—á—ë—Ç—ã
        sent_forms = sum(len(msgs) for msgs in per_teacher.values())
        sent_teachers = len(per_teacher)
        not_sent_forms = len(ambiguous_to_admin)
        unknown_teachers = len({(name or "").strip() for name, _, _ in ambiguous_to_admin if (name or "").strip()})

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞
        report_lines = [
            f"–ê–¥–º–∏–Ω-–æ—Ç—á—ë—Ç –ø–æ —Ñ–æ—Ä–º–µ ¬´{form_name}¬ª –∑–∞ {target} (—Å–ª–æ—Ç {slot})",
            "",
            f"–†–∞–∑–æ—Å–ª–∞–Ω–æ: {sent_forms} –∑–∞–¥–∞—á, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {sent_teachers}",
            f"–ù–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ: {not_sent_forms} –∑–∞–¥–∞—á",
            f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–µ: {unknown_teachers}",
        ]
        report_text = "\n".join(report_lines)

        # –û—Ç–¥–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤, —á—Ç–æ–±—ã –≤–æ—Ä–∫–µ—Ä –ø—Ä–∏–º–µ–Ω–∏–ª —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É
        # –í–ê–ñ–ù–û: –∫–æ–ª–æ–Ω–∫–∞ slot –≤ –ë–î –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ varchar(16), –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–æ–¥—ã
        # today21 -> report_t21, yesterday12 -> report_y12
        short = {"today21": "t21", "yesterday12": "y12"}.get(slot, (slot or "")[:8])
        report_slot = f"report_{short}"
        import hashlib as _hashlib
        report_hash = _hashlib.sha256((report_slot + target + str(sent_forms) + str(not_sent_forms) + str(unknown_teachers)).encode("utf-8")).hexdigest()

        try:
            db.enqueue_preformatted(
                task_id=0,  # —Å–ª—É–∂–µ–±–Ω—ã–π –æ—Ç—á—ë—Ç, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞–¥–∞—á–µ
                user_id=int(admin_ids[0]),  # TG chat_id
                send_at=send_at.astimezone(pytz.UTC).replace(tzinfo=None),
                slot=report_slot,
                message_text=report_text,
                dedupe_hash=report_hash,
            )
        except Exception as e:
            db.log_event("enqueue_admin_report_error", {"error": str(e), "slot": report_slot})


async def run_slot_multi(slot: str) -> None:
    """
    –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º –∏–∑ FORM_ID.
    """
    tz = os.getenv("TZ", "Asia/Yekaterinburg")
    form_ids_str = os.getenv("FORM_ID", "2304918")
    
    # –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º
    form_ids = []
    for fid_str in form_ids_str.split(","):
        try:
            form_ids.append(int(fid_str.strip()))
        except ValueError:
            continue
    
    if not form_ids:
        print(f"‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö form_id –≤ FORM_ID={form_ids_str}")
        db.log_event("form_ids_empty", {"slot": slot, "form_ids_str": form_ids_str})
        return

    now_local = _tz_now(tz)
    target = _target_day_str(now_local, slot)
    
    # –ß–∏—Ç–∞–µ–º ADMIN_IDS
    admin_ids_env = os.getenv("ADMIN_IDS", "")
    ADMIN_IDS = [int(x.strip()) for x in admin_ids_env.split(",") if x.strip().isdigit()]
    
    client = PyrusClient()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ñ–æ—Ä–º—É
    total_sent_forms = 0
    total_sent_teachers = 0
    total_not_sent = 0
    total_unknown = 0
    form_reports = []  # –û—Ç—á–µ—Ç—ã –ø–æ –∫–∞–∂–¥–æ–π —Ñ–æ—Ä–º–µ
    
    for form_id in form_ids:
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ñ–æ—Ä–º—ã
            if form_id == 2304918:
                from ..rules.form_2304918 import check_rules, TEACHER_ID, TEACHER_RULE3_ID, _get_field_value
                use_fuzzy_search = True
            elif form_id == 792300:
                from ..rules.form_792300 import check_rules, TEACHER_ID, _get_field_value, _extract_teacher_full_name, _extract_teacher_user_id
                TEACHER_RULE3_ID = None  # –£ —Ñ–æ—Ä–º—ã 792300 –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è –ø—Ä–∞–≤–∏–ª–∞ 3
                use_fuzzy_search = False  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            else:
                db.log_event("unsupported_form", {"slot": slot, "form_id": form_id})
                continue
            
            form_meta = await client.get_form_meta(form_id)
            if not form_meta:
                db.log_event("form_meta_error", {"slot": slot, "form_id": form_id})
                continue

            fields_meta = _build_fields_meta(form_meta)
            form_name = form_meta.get("name") or f"–§–æ—Ä–º–∞ {form_id}"
            
            per_teacher: Dict[int, List[Tuple[int, str]]] = {}
            ambiguous_to_admin: List[Tuple[str, int, List[str]]] = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ —Ñ–æ—Ä–º—ã
            async for t in client.iter_register_tasks(form_id, include_archived=False):
                task_id = t.get("id") or t.get("task_id")
                task_fields = t.get("fields") or []
                task_title = (t.get("subject") or t.get("text") or f"–ó–∞–¥–∞—á–∞ #{task_id}").strip()
                
                # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—É—Å—Ç–æ–π, –±–µ—Ä–µ–º –∏–∑ –ø–æ–ª—è id=1
                if not task_title:
                    for f in task_fields or []:
                        if f.get("id") == 1:
                            val = f.get("value") or {}
                            if isinstance(val, dict):
                                task_title = str(val.get("text") or val.get("value") or val.get("name") or f.get("name") or "–ó–∞–¥–∞—á–∞").strip()
                            elif isinstance(val, str):
                                task_title = val.strip() or (f.get("name") or "–ó–∞–¥–∞—á–∞").strip()
                            else:
                                task_title = (f.get("name") or "–ó–∞–¥–∞—á–∞").strip()
                            break
                
                errors_map = check_rules(fields_meta, task_fields, target, slot)
                general_errors = errors_map.get("general") or []
                rule3_errors = errors_map.get("rule3") or []
                
                if not general_errors and not rule3_errors:
                    continue

                _fmt = _format_today_message if slot == "today21" else _format_yesterday_message

                # 1) –û–±—â–∏–µ –æ—à–∏–±–∫–∏ ‚Üí –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
                if general_errors:
                    teacher_user_id = _extract_teacher_user_id(task_fields, TEACHER_ID)
                    if isinstance(teacher_user_id, int):
                        # –ü—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ user_id
                        try:
                            user_obj = db.get_user(int(teacher_user_id))
                        except Exception:
                            user_obj = None
                        if user_obj:
                            per_teacher.setdefault(teacher_user_id, []).append((task_id, _fmt(task_title or "–ó–∞–¥–∞—á–∞", task_id, general_errors)))
                        else:
                            teacher_name = _extract_teacher_full_name(task_fields, TEACHER_ID)
                            ambiguous_to_admin.append((teacher_name or "", task_id, general_errors))
                    else:
                        # Fallback: fuzzy-–ø–æ–∏—Å–∫ –ø–æ –§–ò–û (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–æ—Ä–º –∫–æ—Ç–æ—Ä—ã–µ —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç)
                        teacher_name = _extract_teacher_full_name(task_fields, TEACHER_ID)
                        if use_fuzzy_search:
                            full_name, user_id = _fuzzy_find_user_by_full_name(teacher_name, threshold=0.85)
                            if full_name and user_id:
                                per_teacher.setdefault(user_id, []).append((task_id, _fmt(task_title or "–ó–∞–¥–∞—á–∞", task_id, general_errors)))
                            else:
                                ambiguous_to_admin.append((teacher_name or "", task_id, general_errors))
                        else:
                            # –î–ª—è —Ñ–æ—Ä–º –±–µ–∑ fuzzy-–ø–æ–∏—Å–∫–∞ —Å—Ä–∞–∑—É –≤ –∞–¥–º–∏–Ω—ã
                            ambiguous_to_admin.append((teacher_name or "", task_id, general_errors))

                # 2) –û—à–∏–±–∫–∏ –ø—Ä–∞–≤–∏–ª–∞ 3 ‚Üí –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏–∑ –ø–æ–ª—è TEACHER_RULE3_ID (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if rule3_errors and TEACHER_RULE3_ID:
                    teacher_user_id_r3 = _extract_teacher_user_id(task_fields, TEACHER_RULE3_ID)
                    if isinstance(teacher_user_id_r3, int):
                        try:
                            user_obj_r3 = db.get_user(int(teacher_user_id_r3))
                        except Exception:
                            user_obj_r3 = None
                        if user_obj_r3:
                            per_teacher.setdefault(teacher_user_id_r3, []).append((task_id, _fmt(task_title or "–ó–∞–¥–∞—á–∞", task_id, rule3_errors)))
                        else:
                            teacher_name_r3 = _extract_teacher_full_name(task_fields, TEACHER_RULE3_ID)
                            ambiguous_to_admin.append((teacher_name_r3 or "", task_id, rule3_errors))
                    else:
                        teacher_name_r3 = _extract_teacher_full_name(task_fields, TEACHER_RULE3_ID)
                        if use_fuzzy_search:
                            full_name_r3, user_id_r3 = _fuzzy_find_user_by_full_name(teacher_name_r3, threshold=0.85)
                            if full_name_r3 and user_id_r3:
                                per_teacher.setdefault(user_id_r3, []).append((task_id, _fmt(task_title or "–ó–∞–¥–∞—á–∞", task_id, rule3_errors)))
                            else:
                                ambiguous_to_admin.append((teacher_name_r3 or "", task_id, rule3_errors))
                        else:
                            ambiguous_to_admin.append((teacher_name_r3 or "", task_id, rule3_errors))

            # –ü–æ–¥—Å—á–µ—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ñ–æ—Ä–º–µ
            sent_forms = sum(len(msgs) for msgs in per_teacher.values())
            sent_teachers = len(per_teacher)
            not_sent_forms = len(ambiguous_to_admin)
            unknown_teachers = len({(name or "").strip() for name, _, _ in ambiguous_to_admin if (name or "").strip()})
            
            total_sent_forms += sent_forms
            total_sent_teachers += sent_teachers
            total_not_sent += not_sent_forms
            total_unknown += unknown_teachers
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –ø–æ —Ñ–æ—Ä–º–µ
            form_reports.append(f"üìã {form_name}: —Ä–∞–∑–æ—Å–ª–∞–Ω–æ {sent_forms}, –Ω–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ {not_sent_forms}")
            
            # –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            import hashlib
            send_at = _tz_now(tz)
            
            for user_id, msgs in per_teacher.items():
                for task_id, text in msgs:
                    h = hashlib.sha256((slot + str(task_id) + str(user_id) + text).encode("utf-8")).hexdigest()
                    try:
                        db.enqueue_preformatted(
                            task_id=int(task_id),
                            user_id=int(user_id),
                            send_at=send_at.astimezone(pytz.UTC).replace(tzinfo=None),
                            slot=slot,
                            message_text=text,
                            dedupe_hash=h,
                        )
                    except Exception as e:
                        db.log_event("enqueue_error", {"user_id": user_id, "task_id": task_id, "error": str(e)})
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Ñ–æ—Ä–º–µ
            db.log_event("form_check_summary", {
                "slot": slot,
                "form_id": form_id,
                "form_name": form_name,
                "teachers_found": sent_teachers,
                "ambiguous": not_sent_forms,
            })
            print(f"[form_checks] slot={slot} form='{form_name}' teachers_found={sent_teachers} ambiguous={not_sent_forms}")
            
        except Exception as e:
            db.log_event("form_check_error", {
                "slot": slot,
                "form_id": form_id,
                "error": str(e)
            })
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º—ã {form_id}: {e}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –∞–¥–º–∏–Ω-–æ—Ç—á–µ—Ç
    if ADMIN_IDS:
        report_lines = [
            f"üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ {target} (—Å–ª–æ—Ç {slot})",
            f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–æ—Ä–º: {len(form_ids)}",
            "",
        ] + form_reports + [
            "",
            f"üèÜ –ò–¢–û–ì–û:",
            f"–†–∞–∑–æ—Å–ª–∞–Ω–æ: {total_sent_forms} –∑–∞–¥–∞—á, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {total_sent_teachers}",
            f"–ù–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ: {total_not_sent} –∑–∞–¥–∞—á",
            f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {total_unknown}",
        ]
        report_text = "\n".join(report_lines)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
        short = {"today21": "t21", "yesterday12": "y12"}.get(slot, slot[:8])
        report_slot = f"report_{short}"
        
        import hashlib
        report_hash = hashlib.sha256((report_slot + target + str(total_sent_forms) + str(total_not_sent)).encode("utf-8")).hexdigest()
        
        send_at = _tz_now(tz)
        try:
            db.enqueue_preformatted(
                task_id=0,
                user_id=int(ADMIN_IDS[0]),
                send_at=send_at.astimezone(pytz.UTC).replace(tzinfo=None),
                slot=report_slot,
                message_text=report_text,
                dedupe_hash=report_hash,
            )
        except Exception as e:
            db.log_event("enqueue_admin_report_error", {"error": str(e), "slot": report_slot})


