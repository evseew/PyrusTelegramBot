#!/usr/bin/env python3
"""
–§–æ–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
–≠—Ç–∞–ø 4: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å —Ç–∏—Ö–∏–º–∏ —á–∞—Å–∞–º–∏, TTL, –±–∞—Ç—á–∞–º–∏
"""
import asyncio
import os
from datetime import datetime, timedelta
from typing import List, Dict, Any
import pytz
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from .db import db
from .utils import is_in_quiet_hours, schedule_after, remove_at_mentions, calculate_fire_icons

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
REPEAT_INTERVAL_HOURS = float(os.getenv("REPEAT_INTERVAL_HOURS", "3"))
TTL_HOURS = float(os.getenv("TTL_HOURS", "24"))
TZ = os.getenv("TZ", "Asia/Yekaterinburg")
QUIET_START = os.getenv("QUIET_START", "22:00")
QUIET_END = os.getenv("QUIET_END", "09:00")
TRUNC_TASK_TITLE_LEN = int(os.getenv("TRUNC_TASK_TITLE_LEN", "50"))
TRUNC_COMMENT_LEN = int(os.getenv("TRUNC_COMMENT_LEN", "50"))

# –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
LOGS_RETENTION_DAYS = int(os.getenv("LOGS_RETENTION_DAYS", "2"))
LOGS_CLEANUP_INTERVAL_HOURS = int(os.getenv("LOGS_CLEANUP_INTERVAL_HOURS", "24"))

# –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ BOT_TOKEN)
DRY_RUN = not bool(os.getenv("BOT_TOKEN"))  # –ï—Å–ª–∏ –µ—Å—Ç—å BOT_TOKEN, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É


class NotificationWorker:
    """–§–æ–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.timezone = pytz.timezone(TZ)
        self.running = False
        self.telegram_bot = None
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ DRY_RUN
        if not DRY_RUN:
            try:
                from .bot import bot
                self.telegram_bot = bot
                print(f"‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
                print(f"üìù –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ DRY_RUN —Ä–µ–∂–∏–º")
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DRY_RUN —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ globals()
                globals()['DRY_RUN'] = True
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ —Å —Ü–∏–∫–ª–æ–º –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥"""
        self.running = True
        print(f"üöÄ –í–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω (TZ: {TZ}, –∏–Ω—Ç–µ—Ä–≤–∞–ª: 60—Å–µ–∫)")
        
        while self.running:
            try:
                await self._process_cycle()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –≤–æ—Ä–∫–µ—Ä–∞: {e}")
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                db.log_event("worker_error", {"error": str(e)})
            
            # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
            await asyncio.sleep(60)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞"""
        self.running = False
        print("üõë –í–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _process_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        now = datetime.now(self.timezone)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ service_enabled
        if not self._is_service_enabled():
            print(f"‚è∏Ô∏è  –°–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω (service_enabled=false)")
            return
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ö–∏–µ —á–∞—Å—ã
        if is_in_quiet_hours(now, TZ, QUIET_START, QUIET_END):
            print(f"üò¥ –¢–∏—Ö–∏–µ —á–∞—Å—ã ({now.strftime('%H:%M')}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª")
            return
        
        # 3. –í—ã–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å–∏ –≥–æ—Ç–æ–≤—ã–µ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
        due_records = self._get_due_records(now)
        if not due_records:
            print(f"‚úÖ –ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø–∏—Å–µ–π ({now.strftime('%H:%M')})")
            return
        
        print(f"üì¨ –ù–∞–π–¥–µ–Ω–æ {len(due_records)} –∑–∞–ø–∏—Å–µ–π –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ")
        
        # 4. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á–∏
        user_batches = self._group_by_user(due_records)
        
        for user_id, records in user_batches.items():
            await self._send_user_batch(user_id, records, now)
        
        # 5. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ (TTL, –ø–æ–≤—Ç–æ—Ä—ã)
        await self._update_records_after_sending(due_records, now)

        # 6. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –≤ –ë–î –ø–æ retention
        self._maybe_cleanup_logs(now)
    
    def _is_service_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞ service_enabled"""
        try:
            enabled = db.settings_get('service_enabled')
            return enabled == 'true'
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def _get_due_records(self, now: datetime) -> List[Dict[str, Any]]:
        """–í—ã–±–æ—Ä –∑–∞–ø–∏—Å–µ–π –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ UTC –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
            now_utc = now.astimezone(pytz.UTC).replace(tzinfo=None)
            return db.select_due(now_utc)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
            return []
    
    def _group_by_user(self, records: List[Dict[str, Any]]) -> Dict[int, List[Dict[str, Any]]]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è –±–∞—Ç—á-–æ—Ç–ø—Ä–∞–≤–∫–∏"""
        batches = {}
        
        for record in records:
            user_id = record['user_id']
            if user_id not in batches:
                batches[user_id] = []
            batches[user_id].append(record)
        
        return batches
    
    async def _send_user_batch(self, user_id: int, records: List[Dict[str, Any]], now: datetime):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞—Ç—á-—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = records[0].get('users')  # –î–∞–Ω–Ω—ã–µ –∏–∑ JOIN –∑–∞–ø—Ä–æ—Å–∞
            if not user_data:
                print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è user_id={user_id}")
                return
            
            telegram_id = user_data.get('telegram_id')
            full_name = user_data.get('full_name', f'User {user_id}')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_batch_message(records, now)
            
            # –í —Ä–µ–∂–∏–º–µ DRY_RUN —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
            if DRY_RUN:
                print(f"üìù [DRY RUN] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {full_name} (TG:{telegram_id}):")
                print(f"   {message}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤ –ë–î
                db.log_event("notify_dry_run", {
                    "user_id": user_id,
                    "telegram_id": telegram_id,
                    "full_name": full_name,
                    "task_count": len(records),
                    "message": message
                })
            else:
                # –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram
                success = await self._send_telegram_message(telegram_id, message)
                
                if success:
                    print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {full_name} (TG:{telegram_id})")
                    db.log_event("notify_sent", {
                        "user_id": user_id,
                        "telegram_id": telegram_id,
                        "full_name": full_name,
                        "task_count": len(records)
                    })
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {full_name} (TG:{telegram_id})")
                    db.log_event("notify_failed", {
                        "user_id": user_id,
                        "telegram_id": telegram_id,
                        "full_name": full_name,
                        "task_count": len(records),
                        "error": "telegram_send_failed"
                    })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            db.log_event("notify_error", {
                "user_id": user_id,
                "error": str(e)
            })
    
    def _format_batch_message(self, records: List[Dict[str, Any]], now: datetime) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞—Ç—á-—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ PRD"""
        if len(records) == 1:
            # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return self._format_single_message(records[0], now)
        else:
            # –ë–∞—Ç—á-—Å–æ–æ–±—â–µ–Ω–∏–µ
            return self._format_multi_message(records, now)
    
    def _format_single_message(self, record: Dict[str, Any], now: datetime) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        task_id = record['task_id']
        last_mention_at = datetime.fromisoformat(record['last_mention_at'].replace('Z', '+00:00'))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –±–µ—Ä—ë–º –∏–∑ –ë–î (—Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø—Ä–∏ –ø—Ä–∏—ë–º–µ –≤–µ–±—Ö—É–∫–∞)
        task_title = record.get('task_title') or f"–ó–∞–¥–∞—á–∞ #{task_id}"
        # –ë–µ—Ä—ë–º –ø—Ä–µ–¥–æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (–æ—á–∏—â–µ–Ω –≤–æ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ –≤–µ–±—Ö—É–∫–∞ –æ—Ç –§–ò–û —É–ø–æ–º—è–Ω—É—Ç—ã—Ö)
        raw_comment = record.get('last_mention_comment_text_clean') or record.get('last_mention_comment_text', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
        comment_text = remove_at_mentions(raw_comment)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫—É (–ø—Ä–∏–≤–æ–¥–∏–º –∫ –æ–¥–Ω–æ–π —Ç–∞–π–º–∑–æ–Ω–µ)
        now_utc = now.astimezone(pytz.UTC) if now.tzinfo else pytz.UTC.localize(now)
        last_mention_utc = last_mention_at if last_mention_at.tzinfo else pytz.UTC.localize(last_mention_at)
        hours_overdue = int((now_utc - last_mention_utc).total_seconds() / 3600)
        
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç—ã
        task_title_short = task_title[:TRUNC_TASK_TITLE_LEN]
        comment_short = comment_text[:TRUNC_COMMENT_LEN]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≥–æ–Ω—å–∫–æ–≤
        times_sent = int(record.get('times_sent', 0))
        fire_icons = calculate_fire_icons(hours_overdue, times_sent)
        
        return f"""üëã –ü—Ä–∏–≤–µ—Ç! –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ üìã

{fire_icons} 
{task_title_short}
üí¨ {comment_short}
üîó https://pyrus.com/t#id{task_id}"""
    
    def _format_multi_message(self, records: List[Dict[str, Any]], now: datetime) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞—Ç—á-—Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
        task_data = []
        
        for record in records:
            task_id = record['task_id']
            last_mention_at = datetime.fromisoformat(record['last_mention_at'].replace('Z', '+00:00'))
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –±–µ—Ä—ë–º –∏–∑ –ë–î (—Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø—Ä–∏ –ø—Ä–∏—ë–º–µ –≤–µ–±—Ö—É–∫–∞)
            task_title = record.get('task_title') or f"–ó–∞–¥–∞—á–∞ #{task_id}"
            raw_comment = record.get('last_mention_comment_text_clean') or record.get('last_mention_comment_text', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
            comment_text = remove_at_mentions(raw_comment)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫—É (–ø—Ä–∏–≤–æ–¥–∏–º –∫ –æ–¥–Ω–æ–π —Ç–∞–π–º–∑–æ–Ω–µ)
            now_utc = now.astimezone(pytz.UTC) if now.tzinfo else pytz.UTC.localize(now)
            last_mention_utc = last_mention_at if last_mention_at.tzinfo else pytz.UTC.localize(last_mention_at)
            hours_overdue = int((now_utc - last_mention_utc).total_seconds() / 3600)
            
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç—ã
            task_title_short = task_title[:TRUNC_TASK_TITLE_LEN]
            comment_short = comment_text[:TRUNC_COMMENT_LEN]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≥–æ–Ω—å–∫–æ–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            times_sent = int(record.get('times_sent', 0))
            fire_icons = calculate_fire_icons(hours_overdue, times_sent)
            fire_level = len(fire_icons)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≥–æ–Ω—å–∫–æ–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            
            task_data.append({
                'task_id': task_id,
                'task_title_short': task_title_short,
                'comment_short': comment_short,
                'fire_icons': fire_icons,
                'fire_level': fire_level
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (–±–æ–ª—å—à–µ –æ–≥–æ–Ω—å–∫–æ–≤ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        task_data.sort(key=lambda x: x['fire_level'], reverse=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –∑–∞–¥–∞—á
        lines = []
        for task in task_data:
            task_line = f"""{task['fire_icons']} 
{task['task_title_short']}
üí¨ {task['comment_short']}
üîó https://pyrus.com/t#id{task['task_id']}"""
            lines.append(task_line)
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ–¥–∏–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        header = "üëã –ü—Ä–∏–≤–µ—Ç! –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ üìã\n\n"
        
        return header + '\n\n'.join(lines)
    
    async def _send_telegram_message(self, telegram_id: int, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram"""
        if self.telegram_bot:
            return await self.telegram_bot.send_notification(telegram_id, message)
        else:
            print(f"‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ chat {telegram_id}")
            return False
    
    async def _update_records_after_sending(self, records: List[Dict[str, Any]], now: datetime):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (TTL, –ø–æ–≤—Ç–æ—Ä—ã)"""
        now_utc = now.astimezone(pytz.UTC).replace(tzinfo=None)
        
        for record in records:
            task_id = record['task_id']
            user_id = record['user_id']
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ db.py –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                db.mark_sent_or_delete_by_ttl(
                    task_id=task_id,
                    user_id=user_id,
                    now_ts=now_utc,
                    ttl_hours=TTL_HOURS,
                    repeat_interval_hours=REPEAT_INTERVAL_HOURS,
                    tz_name=TZ,
                    quiet_start=QUIET_START,
                    quiet_end=QUIET_END
                )
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ {task_id}/{user_id}: {e}")

    def _maybe_cleanup_logs(self, now: datetime) -> None:
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–∞—Ä–∫–µ—Ä—É –≤ settings.

        - –•—Ä–∞–Ω–∏–º –≤ settings –∫–ª—é—á `logs_last_cleanup_ts` (ISO –≤—Ä–µ–º—è –≤ UTC –±–µ–∑ tz).
        - –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ >= LOGS_CLEANUP_INTERVAL_HOURS ‚Äî –≤—ã–∑—ã–≤–∞–µ–º db.cleanup_old_logs(LOGS_RETENTION_DAYS).
        """
        try:
            # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫ UTC naive (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å –ë–î-–º–µ—Ç–æ–¥–∞–º–∏)
            now_utc_naive = now.astimezone(pytz.UTC).replace(tzinfo=None)

            last_cleanup_str = db.settings_get('logs_last_cleanup_ts')
            should_run = True
            if last_cleanup_str:
                try:
                    parsed = datetime.fromisoformat(str(last_cleanup_str).replace('Z', '+00:00'))
                    last_cleanup_utc_naive = (
                        parsed if parsed.tzinfo is None else parsed.astimezone(pytz.UTC).replace(tzinfo=None)
                    )
                    hours_since = (now_utc_naive - last_cleanup_utc_naive).total_seconds() / 3600
                    should_run = hours_since >= LOGS_CLEANUP_INTERVAL_HOURS
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ‚Äî –∑–∞–ø—É—Å—Ç–∏–º –æ—á–∏—Å—Ç–∫—É –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º –º–µ—Ç–∫—É
                    should_run = True

            if not should_run:
                return

            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ retention
            db.cleanup_old_logs(days=LOGS_RETENTION_DAYS)
            db.settings_set('logs_last_cleanup_ts', now_utc_naive.isoformat())
            db.log_event("logs_cleanup", {
                "retention_days": LOGS_RETENTION_DAYS,
                "interval_hours": LOGS_CLEANUP_INTERVAL_HOURS
            })
            print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: retention={LOGS_RETENTION_DAYS}d, next in {LOGS_CLEANUP_INTERVAL_HOURS}h")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞
async def run_worker():
    """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞"""
    worker = NotificationWorker()
    
    try:
        await worker.start()
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        worker.stop()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞: {e}")
        worker.stop()


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print(f"üìÖ –†–µ–∂–∏–º: DRY_RUN={DRY_RUN}")
    print(f"üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {TZ}")
    print(f"üò¥ –¢–∏—Ö–∏–µ —á–∞—Å—ã: {QUIET_START}-{QUIET_END}")
    print(f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–æ–≤: {REPEAT_INTERVAL_HOURS}—á")
    print(f"‚è∞ TTL: {TTL_HOURS}—á")
    print("‚îÄ" * 50)
    
    asyncio.run(run_worker())
