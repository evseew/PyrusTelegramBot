import json
import os
import logging
from datetime import datetime
from pathlib import Path
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import PlainTextResponse
import asyncio
import aiofiles
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from .utils import verify_pyrus_signature, schedule_after, remove_full_names, extract_last_meaningful_paragraph
from .models import PyrusWebhookPayload
from .db import db

app = FastAPI(title="Pyrus Telegram Bot", version="1.0.0")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
LOGS_DIR = Path("logs")
LOGS_DIR.mkdir(exist_ok=True)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
PYRUS_WEBHOOK_SECRET = os.getenv("PYRUS_WEBHOOK_SECRET", "")
DEV_SKIP_PYRUS_SIG = os.getenv("DEV_SKIP_PYRUS_SIG", "false").lower() == "true"
DELAY_HOURS = float(os.getenv("DELAY_HOURS", "3"))
TZ = os.getenv("TZ", "Asia/Yekaterinburg")
QUIET_START = os.getenv("QUIET_START", "22:00")
QUIET_END = os.getenv("QUIET_END", "09:00")

# –°–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —Å—á–∏—Ç–∞–µ–º —Ä–µ–∞–∫—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
REACTION_EXCLUDE_KINDS = {"viewed", "opened", "read"}


def _collect_reacting_user_ids(event_type: str, task, actor, change) -> set[int]:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ user_id, –∫–æ—Ç–æ—Ä—ã—Ö —Å–ª–µ–¥—É–µ—Ç —Å—á–∏—Ç–∞—Ç—å –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–≤—à–∏–º–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ.
    –ò—Å—Ç–æ—á–Ω–∏–∫–∏: payload.actor.id, –≤—Å–µ comment.author.id (–¥–ª—è comment), –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—è –∏–∑ change.
    """
    reacting: set[int] = set()
    try:
        if actor and getattr(actor, "id", None):
            reacting.add(int(actor.id))
    except Exception:
        pass

    # –î–ª—è —Å–æ–±—ã—Ç–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–æ–≤ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    if event_type == "comment" and task and getattr(task, "comments", None):
        try:
            for c in task.comments:
                author_id = getattr(getattr(c, "author", None), "id", None)
                if author_id:
                    reacting.add(int(author_id))
        except Exception:
            pass

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º id –∏–∑ change, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    try:
        if change:
            for key in ("user_id", "changed_by", "author_id", "actor_id"):
                val = change.get(key)
                if isinstance(val, int):
                    reacting.add(val)
                # –ò–Ω–æ–≥–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
                elif isinstance(val, str) and val.isdigit():
                    reacting.add(int(val))
    except Exception:
        pass

    return reacting


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return PlainTextResponse("ok")


@app.post("/pyrus/webhook")
async def pyrus_webhook(request: Request):
    """
    –ü—Ä–∏—ë–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Pyrus
    
    –≠—Ç–∞–ø 3: —Ä–µ–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —Ä–µ–∞–∫—Ü–∏–π
    """
    logger.info("=== WEBHOOK REQUEST START ===")
    
    # –°—á–∏—Ç—ã–≤–∞–µ–º —Å—ã—Ä–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    raw_body = await request.body()
    logger.info(f"Raw body length: {len(raw_body)} bytes")
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers = dict(request.headers)
    retry_header = headers.get("x-pyrus-retry", "1/1")
    signature_header = headers.get("x-pyrus-sig", "")
    content_type = headers.get("content-type", "")
    
    logger.info(f"Headers received:")
    logger.info(f"  Content-Type: {content_type}")
    logger.info(f"  X-Pyrus-Retry: {retry_header}")
    logger.info(f"  X-Pyrus-Sig: {signature_header[:20]}..." if signature_header else "  X-Pyrus-Sig: MISSING")
    logger.info(f"  PYRUS_WEBHOOK_SECRET present: {bool(PYRUS_WEBHOOK_SECRET)}")
    logger.info(f"  DEV_SKIP_PYRUS_SIG: {DEV_SKIP_PYRUS_SIG}")
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å HMAC
        if not verify_pyrus_signature(raw_body, PYRUS_WEBHOOK_SECRET, DEV_SKIP_PYRUS_SIG, signature_header):
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"üîí Signature validation failed:")
            print(f"   PYRUS_WEBHOOK_SECRET present: {bool(PYRUS_WEBHOOK_SECRET)}")
            print(f"   DEV_SKIP_PYRUS_SIG: {DEV_SKIP_PYRUS_SIG}")
            print(f"   signature_header: {signature_header[:50]}...")
            asyncio.create_task(_log_webhook_async(raw_body, retry_header, "invalid_signature"))
            raise HTTPException(status_code=401, detail="Invalid signature")
        
        # 2. –ü–∞—Ä—Å–∏–º JSON –≤ –º–æ–¥–µ–ª—å
        try:
            payload_data = json.loads(raw_body.decode('utf-8'))
            payload = PyrusWebhookPayload(**payload_data)
        except (json.JSONDecodeError, Exception) as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞
            asyncio.create_task(_log_webhook_async(raw_body, retry_header, f"parse_error: {e}"))
            raise HTTPException(status_code=400, detail=f"Invalid JSON: {e}")
        
        # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ —Ç–∏–ø—É
        await _process_webhook_event(payload, retry_header)
        
        # 4. –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É  
        asyncio.create_task(_log_webhook_async(raw_body, retry_header, "processed"))
        
        return {"status": "ok", "message": "webhook processed"}
        
    except HTTPException:
        # Re-raise HTTP exceptions
        raise
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        asyncio.create_task(_log_webhook_async(raw_body, retry_header, f"error: {e}"))
        # –ù–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã Pyrus –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª
        print(f"Unexpected error processing webhook: {e}")
        return {"status": "error", "message": "Internal error, logged"}


async def _log_webhook_async(raw_body: bytes, retry_header: str, status: str = "unknown"):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –≤ —Ñ–∞–π–ª"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
        today = datetime.now().strftime("%Y%m%d")
        log_file = LOGS_DIR / f"pyrus_raw_{today}.ndjson"
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            payload = json.loads(raw_body.decode('utf-8'))
            is_valid_json = True
        except (json.JSONDecodeError, UnicodeDecodeError):
            payload = {"raw_body": raw_body.hex(), "error": "invalid_json"}
            is_valid_json = False
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –¥–ª—è –ª–æ–≥–∞
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "retry_header": retry_header,
            "status": status,
            "is_valid_json": is_valid_json,
            "payload": payload
        }
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª (NDJSON —Ñ–æ—Ä–º–∞—Ç)
        async with aiofiles.open(log_file, "a", encoding="utf-8") as f:
            await f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")
            
    except Exception as e:
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–∞: {e}")


async def _process_webhook_event(payload: PyrusWebhookPayload, retry_header: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤–µ–±—Ö—É–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ PRD
    
    Args:
        payload: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π webhook payload
        retry_header: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–≤—Ç–æ—Ä–∞
    """
    try:
        event_type = payload.event
        task = payload.task
        task_id = task.id
        actor = payload.actor
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        db.log_event("webhook_received", {
            "event": event_type,
            "task_id": task_id,
            "actor_id": actor.id if actor else None,
            "retry_header": retry_header
        })
        
        if event_type == "comment":
            await _handle_comment_event(task, actor, retry_header)
        elif event_type in ["task_updated", "form_updated"]:
            await _handle_task_update_event(task, actor, payload.change)
        elif event_type in ["task_closed", "task_canceled"]:
            await _handle_task_closed_event(task_id)
        elif event_type == "comment_deleted":
            await _handle_comment_deleted_event(task, payload.change)
        else:
            print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –¥–ª—è –ª—é–±—ã—Ö —Å–æ–±—ã—Ç–∏–π (–∫—Ä–æ–º–µ comment, –∑–∞–∫—Ä—ã—Ç–∏—è/–æ—Ç–º–µ–Ω—ã)
        # –ò—Å–∫–ª—é—á–∞–µ–º ¬´–ø—Ä–æ—Å–º–æ—Ç—Ä/–æ—Ç–∫—Ä—ã—Ç–∏–µ/–ø—Ä–æ—á–∏—Ç–∞–ª¬ª –ø–æ change.kind
        try:
            if event_type not in ["task_closed", "task_canceled", "comment"]:
                change_kind = (payload.change.get("kind") if payload and payload.change else None)
                if change_kind and str(change_kind).lower() in REACTION_EXCLUDE_KINDS:
                    return
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏ —Å–Ω–∏–º–∞–µ–º –∏—Ö –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                reacting_ids = _collect_reacting_user_ids(event_type, task, actor, payload.change)
                for uid in reacting_ids:
                    try:
                        db.delete_pending(task_id, uid)
                        db.log_event("user_reacted_generic", {
                            "task_id": task_id,
                            "user_id": uid,
                            "event_type": event_type,
                            "change_kind": change_kind
                        })
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –ø–æ user {uid} –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        db.log_event("webhook_error", {
            "error": str(e),
            "event": payload.event if payload else "unknown",
            "task_id": payload.task.id if payload and payload.task else None
        })


async def _handle_comment_event(task, actor, retry_header: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    if not task.comments:
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å —É—á—ë—Ç–æ–º –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    comments_sorted = sorted(task.comments, key=lambda c: c.create_date)
    total_comments = len(comments_sorted)
    with_mentions = 0
    enqueued = 0

    for comment in comments_sorted:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if db.processed_comment_exists(task.id, comment.id):
            continue

        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –Ω–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–º—É –ø–æ–≤—Ç–æ—Ä–Ω–æ
        db.insert_processed_comment(task.id, comment.id)

        if not comment.mentions:
            continue

        with_mentions += 1

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: —É–¥–∞–ª–∏–º –§–ò–û –≤—Å–µ—Ö —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ —É –Ω–∞—Å –µ—Å—Ç—å
        mentioned_full_names = []
        for mentioned_user_id in comment.mentions:
            user = db.get_user(mentioned_user_id)
            if user and user.full_name:
                mentioned_full_names.append(user.full_name)

        comment_text = comment.text or "(—Å–∏—Å—Ç–µ–º–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ)"
        # 1) —É–¥–∞–ª—è–µ–º –§–ò–û —É–ø–æ–º—è–Ω—É—Ç—ã—Ö
        cleaned = remove_full_names(comment_text, mentioned_full_names) if mentioned_full_names else comment_text
        # 2) –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –∞–±–∑–∞—Ü, —á—Ç–æ–±—ã –Ω–µ —Å–∫–ª–µ–∏–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã –∏ –æ—Ç–≤–µ—Ç—ã
        clean_comment_text = extract_last_meaningful_paragraph(cleaned)

        for mentioned_user_id in comment.mentions:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user = db.get_user(mentioned_user_id)
            if not user:
                print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mentioned_user_id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            mention_time = comment.create_date
            next_send_at = schedule_after(mention_time, DELAY_HOURS, TZ, QUIET_START, QUIET_END)
            # –ë–µ—Ä—ë–º subject, –∞ –¥–ª—è –∑–∞–¥–∞—á-—Ñ–æ—Ä–º fallback –Ω–∞ text
            task_title = (task.subject or task.text) or f"–ó–∞–¥–∞—á–∞ #{task.id}"

            db.upsert_or_shift_pending(
                task_id=task.id,
                user_id=mentioned_user_id,
                mention_ts=mention_time,
                comment_id=comment.id,
                comment_text=comment_text,
                next_send_at=next_send_at,
                task_title=task_title,
                comment_text_clean=clean_comment_text
            )

            db.log_event("mention_queued", {
                "task_id": task.id,
                "user_id": mentioned_user_id,
                "comment_id": comment.id,
                "next_send_at": next_send_at.isoformat()
            })

            enqueued += 1
            print(f"üì¨ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {mentioned_user_id} –Ω–∞ {next_send_at.strftime('%d.%m %H:%M')}")

    # –°–≤–æ–¥–Ω—ã–π –ª–æ–≥ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    print(f"üßæ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞–¥–∞—á–∏ {task.id}: –≤—Å–µ–≥–æ={total_comments}, —Å_—É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏={with_mentions}, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ_–≤_–æ—á–µ—Ä–µ–¥—å={enqueued}")

    # –°–Ω–∏–º–∞–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (—Ä–µ–∞–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è),
    # –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ payload.actor –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É —Å–æ–±—ã—Ç–∏—è comment
    try:
        authors_to_clear = {
            c.author.id for c in comments_sorted if getattr(c, "author", None) and getattr(c.author, "id", None)
        }
        for author_id in authors_to_clear:
            try:
                db.delete_pending(task.id, author_id)
                db.log_event("user_reacted", {
                    "task_id": task.id,
                    "user_id": author_id,
                    "change_type": "comment_author"
                })
                print(f"‚úÖ –ê–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è {author_id} –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª –≤ –∑–∞–¥–∞—á–µ {task.id}, —É–¥–∞–ª–∏–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è pending –ø–æ –∞–≤—Ç–æ—Ä—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è {author_id} –≤ –∑–∞–¥–∞—á–µ {task.id}: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id}: {e}")

    # –õ—é–±–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä–µ–∞–∫—Ü–∏–µ–π —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–¥–∞—á—É
    if actor and actor.id:
        try:
            db.delete_pending(task.id, actor.id)
            db.log_event("user_reacted", {
                "task_id": task.id,
                "user_id": actor.id,
                "change_type": "comment"
            })
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {actor.id} –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∑–∞–¥–∞—á–µ {task.id}, —É–¥–∞–ª–∏–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è pending –ø–æ —Ä–µ–∞–∫—Ü–∏–∏-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {actor.id} –≤ –∑–∞–¥–∞—á–µ {task.id}: {e}")


async def _handle_task_update_event(task, actor, change):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (—Ä–µ–∞–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)"""
    if not actor:
        return
    
    # –≠—Ç–æ —Ä–µ–∞–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    db.delete_pending(task.id, actor.id)
    
    db.log_event("user_reacted", {
        "task_id": task.id,
        "user_id": actor.id,
        "change_type": change.get("kind") if change else "unknown"
    })
    
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {actor.id} –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª –Ω–∞ –∑–∞–¥–∞—á—É {task.id}, —É–¥–∞–ª–∏–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏")


async def _handle_task_closed_event(task_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è/–æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏"""
    db.delete_pending_by_task(task_id)
    
    db.log_event("task_closed", {
        "task_id": task_id
    })
    
    print(f"üîí –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–∫—Ä—ã—Ç–∞, –æ—á–∏—Å—Ç–∏–ª–∏ –≤—Å—é –æ—á–µ—Ä–µ–¥—å –ø–æ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ")


async def _handle_comment_deleted_event(task, change):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    if not change or "comment_id" not in change:
        return
    
    comment_id = change["comment_id"]

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ—á–µ—Ä–µ–¥–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
    try:
        db.delete_pending_by_comment(task.id, comment_id)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è pending –ø–æ —É–¥–∞–ª—ë–Ω–Ω–æ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é {comment_id} –≤ –∑–∞–¥–∞—á–µ {task.id}: {e}")

    db.log_event("comment_deleted", {
        "task_id": task.id,
        "comment_id": comment_id
    })
    
    print(f"üóëÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment_id} —É–¥–∞–ª–µ–Ω/–∏–∑–º–µ–Ω—ë–Ω –≤ –∑–∞–¥–∞—á–µ {task.id}")


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 