/**
 * API Route: /api/sync/trigger
 * –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Pyrus
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * POST /api/sync/trigger
 * 
 * –û—Ç–≤–µ—Ç:
 * { "success": true, "message": "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞" }
 */

import { NextResponse } from 'next/server';
import { PyrusClient } from '@/lib/pyrus-client';
import { PyrusDataAnalyzer } from '@/lib/analyzer';
import { cache } from '@/lib/cache';

/**
 * –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * –ù–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç HTTP-–æ—Ç–≤–µ—Ç
 */
async function runBackgroundSync() {
  try {
    console.log('üöÄ [SYNC] –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    cache.setSyncStatus({
      is_syncing: true,
      progress: {
        current_form: 0,
        current_page: 0,
        total_tasks: 0,
        processed_tasks: 0,
      },
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    const client = new PyrusClient(
      process.env.PYRUS_LOGIN!,
      process.env.PYRUS_SECURITY_KEY!,
      process.env.PYRUS_API_URL
    );

    const analyzer = new PyrusDataAnalyzer(client);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const result = await analyzer.runFullAnalysis((stage, page, tasksCount) => {
      const currentForm = stage === 'form_2304918' ? 2304918 : 792300;
      
      cache.setSyncStatus({
        is_syncing: true,
        progress: {
          current_form: currentForm,
          current_page: page,
          processed_tasks: tasksCount,
        },
      });

      console.log(`üìÑ [SYNC] ${stage}: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}, –∑–∞–¥–∞—á ${tasksCount}`);
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
    cache.setAnalysisResult(result);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    cache.setSyncStatus({
      is_syncing: false,
      last_sync: new Date().toISOString(),
    });

    console.log('‚úÖ [SYNC] –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå [SYNC] –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);

    cache.setSyncStatus({
      is_syncing: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    });
  }
}

export async function POST() {
  try {
    console.log('üîÑ [API] POST /api/sync/trigger');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!process.env.PYRUS_LOGIN || !process.env.PYRUS_SECURITY_KEY) {
      console.error('‚ùå [API] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return NextResponse.json(
        {
          error: '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è PYRUS_LOGIN –∏ PYRUS_SECURITY_KEY',
        },
        { status: 500 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    const status = cache.getSyncStatus();
    if (status.is_syncing) {
      console.warn('‚ö†Ô∏è [API] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
      return NextResponse.json(
        {
          error: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
          progress: status.progress,
        },
        { status: 409 }
      );
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
    runBackgroundSync().catch((error) => {
      console.error('üí• [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    });

    // –°—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    console.log('‚úÖ [API] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ');
    return NextResponse.json(
      {
        success: true,
        message: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ',
      },
      { status: 202 }
    );
  } catch (error) {
    console.error('‚ùå [API] –û—à–∏–±–∫–∞ –≤ /api/sync/trigger:', error);
    return NextResponse.json(
      {
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}

