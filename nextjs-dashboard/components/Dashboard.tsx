/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–∞—à–±–æ—Ä–¥–∞
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º –∏ —Ñ–∏–ª–∏–∞–ª–∞–º
 */

'use client';

import { useEffect, useState } from 'react';
import { TeachersTable } from './TeachersTable';
import { BranchesTable } from './BranchesTable';
import { SyncStatus } from './SyncStatus';
import type { AnalysisResult } from '../lib/types';

export function Dashboard() {
  const [data, setData] = useState<AnalysisResult | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<'oldies' | 'trial' | 'branches'>('oldies');

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const fetchData = async () => {
    try {
      setLoading(true);
      setError(null);

      console.log('üîç [DEBUG] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ /api/data/teachers');
      const response = await fetch('/api/data/teachers');
      
      console.log('üîç [DEBUG] Response status:', response.status);
      console.log('üîç [DEBUG] Response statusText:', response.statusText);
      console.log('üîç [DEBUG] Response headers:', Object.fromEntries(response.headers.entries()));
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('üîç [DEBUG] Response error body:', errorText);
        throw new Error(`–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (${response.status}): ${errorText}`);
      }

      const teachersData = await response.json();
      console.log('üîç [DEBUG] Teachers data loaded:', Object.keys(teachersData));

      console.log('üîç [DEBUG] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ /api/data/branches');
      const branchesResponse = await fetch('/api/data/branches');
      console.log('üîç [DEBUG] Branches response status:', branchesResponse.status);
      
      const branchesData = await branchesResponse.json();
      console.log('üîç [DEBUG] Branches data loaded:', Object.keys(branchesData));

      setData({
        ...teachersData,
        branches: branchesData.branches,
      } as AnalysisResult);
      
      console.log('‚úÖ [DEBUG] –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (err) {
      console.error('‚ùå [DEBUG] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err);
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const triggerSync = async () => {
    try {
      console.log('üîç [DEBUG] –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ POST /api/sync/trigger');
      const response = await fetch('/api/sync/trigger', { method: 'POST' });
      
      console.log('üîç [DEBUG] Sync response status:', response.status);
      console.log('üîç [DEBUG] Sync response statusText:', response.statusText);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('üîç [DEBUG] Sync error body:', errorText);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (${response.status}): ${errorText}`);
      }

      const result = await response.json();
      console.log('‚úÖ [DEBUG] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞:', result);

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      setTimeout(() => {
        fetchData();
      }, 5000);
    } catch (err) {
      console.error('‚ùå [DEBUG] –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', err);
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    }
  };

  useEffect(() => {
    fetchData();
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(fetchData, 30000);
    return () => clearInterval(interval);
  }, []);

  if (loading && !data) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
        </div>
      </div>
    );
  }

  if (error && !data) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
        <div className="bg-white p-8 rounded-lg shadow-md max-w-2xl w-full">
          <div className="text-red-600 text-center mb-4">
            <svg className="w-16 h-16 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <h2 className="text-xl font-bold mb-2">–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h2>
            <div className="text-left bg-red-50 border border-red-200 rounded p-4 mb-4">
              <p className="text-sm font-mono text-red-800 break-words">{error}</p>
            </div>
            <div className="text-left bg-yellow-50 border border-yellow-200 rounded p-4 mb-4">
              <p className="text-xs text-yellow-800">
                üí° <strong>DEBUG:</strong> –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12 ‚Üí Console), —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
              </p>
            </div>
          </div>
          <button
            onClick={triggerSync}
            className="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition"
          >
            –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">
                üìä Pyrus Dashboard
              </h1>
              <p className="text-sm text-gray-500 mt-1">
                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º –∏ —Ñ–∏–ª–∏–∞–ª–∞–º
              </p>
            </div>
            <SyncStatus onSync={triggerSync} />
          </div>
        </div>
      </header>

      {/* Tabs */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-6">
        <div className="border-b border-gray-200">
          <nav className="-mb-px flex space-x-8">
            <button
              onClick={() => setActiveTab('oldies')}
              className={`
                py-4 px-1 border-b-2 font-medium text-sm
                ${activeTab === 'oldies'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'}
              `}
            >
              üë¥ –í—ã–≤–æ–¥ —Å—Ç–∞—Ä–∏—á–∫–æ–≤
            </button>
            <button
              onClick={() => setActiveTab('trial')}
              className={`
                py-4 px-1 border-b-2 font-medium text-sm
                ${activeTab === 'trial'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'}
              `}
            >
              üë∂ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ—Å–ª–µ –ë–ü–ó
            </button>
            <button
              onClick={() => setActiveTab('branches')}
              className={`
                py-4 px-1 border-b-2 font-medium text-sm
                ${activeTab === 'branches'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'}
              `}
            >
              üè¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º
            </button>
          </nav>
        </div>
      </div>

      {/* Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {data && activeTab === 'oldies' && (
          <TeachersTable
            groups={data.oldies_groups}
            type="oldies"
          />
        )}

        {data && activeTab === 'trial' && (
          <TeachersTable
            groups={data.trial_groups}
            type="trial"
          />
        )}

        {data && activeTab === 'branches' && (
          <BranchesTable branches={data.branches} />
        )}
      </main>
    </div>
  );
}


