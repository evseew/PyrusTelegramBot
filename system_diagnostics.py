#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ PyrusTelegramBot
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É —Ä–∞–±–æ—á–µ–π –∏ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –º–∞—à–∏–Ω–∞–º–∏
"""
import asyncio
import importlib
import json
import logging
import os
import platform
import subprocess
import sys
import tempfile
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SystemDiagnostics:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.results = {
            "timestamp": datetime.now().isoformat(),
            "system_info": {},
            "python_info": {},
            "environment": {},
            "packages": {},
            "files": {},
            "api_connectivity": {},
            "imports": {},
            "permissions": {},
            "logs": {},
            "database": {},
            "network": {},
            "errors": [],
            "warnings": [],
            "recommendations": []
        }
        
    def log_error(self, message: str, exception: Exception = None):
        """–ó–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        error_msg = f"‚ùå {message}"
        if exception:
            error_msg += f": {str(exception)}"
        
        self.results["errors"].append(error_msg)
        logger.error(error_msg)
        if exception:
            logger.error(traceback.format_exc())
    
    def log_warning(self, message: str):
        """–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        warning_msg = f"‚ö†Ô∏è {message}"
        self.results["warnings"].append(warning_msg)
        logger.warning(warning_msg)
    
    def log_success(self, message: str):
        """–ó–∞–ø–∏—Å–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        success_msg = f"‚úÖ {message}"
        logger.info(success_msg)
    
    def run_command(self, command: List[str], timeout: int = 30) -> Dict[str, Any]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        try:
            result = subprocess.run(
                command,
                capture_output=True,
                text=True,
                timeout=timeout,
                check=False
            )
            return {
                "success": result.returncode == 0,
                "stdout": result.stdout.strip(),
                "stderr": result.stderr.strip(),
                "returncode": result.returncode
            }
        except subprocess.TimeoutExpired:
            return {"success": False, "error": f"–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç {timeout}—Å"}
        except Exception as e:
            return {"success": False, "error": str(e)}

    def check_system_info(self):
        """1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        print("\nüñ•Ô∏è  1. –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø")
        print("=" * 50)
        
        try:
            system_info = {
                "platform": platform.platform(),
                "system": platform.system(),
                "release": platform.release(),
                "version": platform.version(),
                "machine": platform.machine(),
                "processor": platform.processor(),
                "hostname": platform.node(),
                "username": os.getenv("USER", "unknown"),
                "home_dir": str(Path.home()),
                "current_dir": str(Path.cwd()),
                "path_env": os.getenv("PATH", "").split(os.pathsep)[:10]  # –ü–µ—Ä–≤—ã–µ 10 –ø—É—Ç–µ–π
            }
            
            self.results["system_info"] = system_info
            
            print(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {system_info['platform']}")
            print(f"–°–∏—Å—Ç–µ–º–∞: {system_info['system']} {system_info['release']}")
            print(f"–•–æ—Å—Ç: {system_info['hostname']}")
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {system_info['username']}")
            print(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {system_info['current_dir']}")
            
            self.log_success("–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞")
            
        except Exception as e:
            self.log_error("–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", e)

    def check_python_info(self):
        """2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("\nüêç 2. PYTHON –ò –í–ò–†–¢–£–ê–õ–¨–ù–û–ï –û–ö–†–£–ñ–ï–ù–ò–ï")
        print("=" * 50)
        
        try:
            python_info = {
                "version": sys.version,
                "version_info": sys.version_info,
                "executable": sys.executable,
                "prefix": sys.prefix,
                "base_prefix": getattr(sys, 'base_prefix', sys.prefix),
                "in_virtualenv": hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix),
                "path": sys.path[:10]  # –ü–µ—Ä–≤—ã–µ 10 –ø—É—Ç–µ–π
            }
            
            self.results["python_info"] = python_info
            
            print(f"–í–µ—Ä—Å–∏—è Python: {python_info['version_info']}")
            print(f"–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª: {python_info['executable']}")
            print(f"–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {'‚úÖ –î–∞' if python_info['in_virtualenv'] else '‚ùå –ù–µ—Ç'}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ pip
            pip_result = self.run_command([sys.executable, "-m", "pip", "--version"])
            if pip_result["success"]:
                print(f"pip: {pip_result['stdout']}")
                python_info["pip_version"] = pip_result["stdout"]
            else:
                self.log_error("pip –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", Exception(pip_result.get("error", "unknown")))
            
            self.log_success("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Python —Å–æ–±—Ä–∞–Ω–∞")
            
        except Exception as e:
            self.log_error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Python", e)

    def check_environment_variables(self):
        """3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ .env —Ñ–∞–π–ª–∞"""
        print("\nüîê 3. –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø")
        print("=" * 50)
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
        required_vars = [
            "BOT_TOKEN",
            "ADMIN_IDS", 
            "SUPABASE_URL",
            "SUPABASE_KEY",
            "PYRUS_LOGIN",
            "PYRUS_SECURITY_KEY",
            "PYRUS_WEBHOOK_SECRET",
        ]
        
        optional_vars = [
            "DELAY_HOURS",
            "REPEAT_INTERVAL_HOURS", 
            "TTL_HOURS",
            "TZ",
            "QUIET_START",
            "QUIET_END",
            "DEV_SKIP_PYRUS_SIG",
            "ENV",
            "PYRUS_API_URL"
        ]
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
            env_file_path = Path(".env")
            env_vars = {}
            
            if env_file_path.exists():
                try:
                    from dotenv import load_dotenv
                    load_dotenv()
                    
                    with open(env_file_path, 'r', encoding='utf-8') as f:
                        for line_num, line in enumerate(f, 1):
                            line = line.strip()
                            if line and not line.startswith('#') and '=' in line:
                                key, value = line.split('=', 1)
                                env_vars[key.strip()] = len(value.strip())  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª–∏–Ω—É
                    
                    print(f"‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω ({len(env_vars)} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)")
                    
                except Exception as e:
                    self.log_error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞", e)
            else:
                self.log_warning("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            environment = {
                "env_file_exists": env_file_path.exists(),
                "env_file_vars": env_vars,
                "required_vars": {},
                "optional_vars": {},
                "missing_required": [],
                "missing_optional": []
            }
            
            print("\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
            for var in required_vars:
                value = os.getenv(var)
                if value:
                    environment["required_vars"][var] = len(value)
                    print(f"  ‚úÖ {var}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ({len(value)} —Å–∏–º–≤–æ–ª–æ–≤)")
                else:
                    environment["missing_required"].append(var)
                    print(f"  ‚ùå {var}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê!")
            
            print("\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
            for var in optional_vars:
                value = os.getenv(var)
                if value:
                    environment["optional_vars"][var] = value
                    print(f"  ‚úÖ {var}: {value}")
                else:
                    environment["missing_optional"].append(var)
                    print(f"  ‚ö™ {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
            
            self.results["environment"] = environment
            
            if environment["missing_required"]:
                self.log_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(environment['missing_required'])}")
            else:
                self.log_success("–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                
        except Exception as e:
            self.log_error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è", e)

    def check_packages(self):
        """4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
        print("\nüì¶ 4. –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –ü–ê–ö–ï–¢–´")
        print("=" * 50)
        
        try:
            # –ß–∏—Ç–∞–µ–º requirements.txt
            req_file = Path("requirements.txt")
            required_packages = {}
            
            if req_file.exists():
                with open(req_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#'):
                            if '==' in line:
                                name, version = line.split('==', 1)
                                required_packages[name.strip()] = version.strip()
                            else:
                                required_packages[line] = "–ª—é–±–∞—è"
                
                print(f"‚úÖ requirements.txt –Ω–∞–π–¥–µ–Ω ({len(required_packages)} –ø–∞–∫–µ—Ç–æ–≤)")
            else:
                self.log_warning("requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
            pip_list = self.run_command([sys.executable, "-m", "pip", "list", "--format=json"])
            installed_packages = {}
            
            if pip_list["success"]:
                try:
                    packages_data = json.loads(pip_list["stdout"])
                    installed_packages = {pkg["name"]: pkg["version"] for pkg in packages_data}
                    print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {len(installed_packages)}")
                except json.JSONDecodeError:
                    self.log_error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤")
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç—Ä–µ–±—É–µ–º—ã–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
            packages_status = {
                "required": required_packages,
                "installed": installed_packages,
                "missing": [],
                "version_mismatch": [],
                "extra": []
            }
            
            print("\n–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤:")
            for req_pkg, req_version in required_packages.items():
                if req_pkg in installed_packages:
                    installed_version = installed_packages[req_pkg]
                    if req_version == "–ª—é–±–∞—è" or req_version == installed_version:
                        print(f"  ‚úÖ {req_pkg}: {installed_version}")
                    else:
                        print(f"  ‚ö†Ô∏è {req_pkg}: —Ç—Ä–µ–±—É–µ—Ç—Å—è {req_version}, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ {installed_version}")
                        packages_status["version_mismatch"].append({
                            "package": req_pkg,
                            "required": req_version,
                            "installed": installed_version
                        })
                else:
                    print(f"  ‚ùå {req_pkg}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!")
                    packages_status["missing"].append(req_pkg)
            
            self.results["packages"] = packages_status
            
            if packages_status["missing"]:
                self.log_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(packages_status['missing'])}")
            
            if packages_status["version_mismatch"]:
                self.log_warning(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–µ—Ä—Å–∏–π: {len(packages_status['version_mismatch'])} –ø–∞–∫–µ—Ç–æ–≤")
            
            if not packages_status["missing"] and not packages_status["version_mismatch"]:
                self.log_success("–í—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏")
                
        except Exception as e:
            self.log_error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–∫–µ—Ç–æ–≤", e)

    def check_files_and_permissions(self):
        """5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        print("\nüìÅ 5. –§–ê–ô–õ–´ –ò –ü–†–ê–í–ê –î–û–°–¢–£–ü–ê")
        print("=" * 50)
        
        required_files = [
            "app/__init__.py",
            "app/api.py", 
            "app/bot.py",
            "app/worker.py",
            "app/db.py",
            "app/utils.py",
            "app/models.py",
            "app/pyrus_client.py",
            "requirements.txt",
            "run_stage5.py"
        ]
        
        optional_files = [
            ".env",
            "schema.sql",
            "logs/",
            "venv/",
            "__pycache__/"
        ]
        
        try:
            files_status = {
                "required": {},
                "optional": {},
                "missing_required": [],
                "missing_optional": [],
                "permission_issues": []
            }
            
            print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            for file_path in required_files:
                path = Path(file_path)
                if path.exists():
                    stat = path.stat()
                    files_status["required"][file_path] = {
                        "exists": True,
                        "size": stat.st_size,
                        "readable": os.access(path, os.R_OK),
                        "writable": os.access(path, os.W_OK),
                        "executable": os.access(path, os.X_OK) if path.suffix == ".py" else None
                    }
                    
                    perms = "r" if files_status["required"][file_path]["readable"] else "-"
                    perms += "w" if files_status["required"][file_path]["writable"] else "-"
                    if path.suffix == ".py":
                        perms += "x" if files_status["required"][file_path]["executable"] else "-"
                    
                    print(f"  ‚úÖ {file_path}: {stat.st_size} –±–∞–π—Ç, –ø—Ä–∞–≤–∞: {perms}")
                    
                    if not files_status["required"][file_path]["readable"]:
                        files_status["permission_issues"].append(f"{file_path}: –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ")
                    
                else:
                    files_status["missing_required"].append(file_path)
                    print(f"  ‚ùå {file_path}: –ù–ï –ù–ê–ô–î–ï–ù!")
            
            print("\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
            for file_path in optional_files:
                path = Path(file_path)
                if path.exists():
                    if path.is_dir():
                        files_count = len(list(path.glob("*")))
                        files_status["optional"][file_path] = {"exists": True, "type": "directory", "files_count": files_count}
                        print(f"  ‚úÖ {file_path}: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ({files_count} —Ñ–∞–π–ª–æ–≤)")
                    else:
                        stat = path.stat()
                        files_status["optional"][file_path] = {"exists": True, "type": "file", "size": stat.st_size}
                        print(f"  ‚úÖ {file_path}: —Ñ–∞–π–ª ({stat.st_size} –±–∞–π—Ç)")
                else:
                    files_status["missing_optional"].append(file_path)
                    print(f"  ‚ö™ {file_path}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            important_dirs = ["app/", "logs/"]
            for dir_path in important_dirs:
                path = Path(dir_path)
                if path.exists() and path.is_dir():
                    if not os.access(path, os.R_OK | os.W_OK):
                        files_status["permission_issues"].append(f"{dir_path}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            
            self.results["files"] = files_status
            
            if files_status["missing_required"]:
                self.log_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã: {', '.join(files_status['missing_required'])}")
            
            if files_status["permission_issues"]:
                self.log_error(f"–ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞: {', '.join(files_status['permission_issues'])}")
            
            if not files_status["missing_required"] and not files_status["permission_issues"]:
                self.log_success("–í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞")
                
        except Exception as e:
            self.log_error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤", e)

    async def check_api_connectivity(self):
        """6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–Ω–µ—à–Ω–∏–º API"""
        print("\nüåê 6. –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –í–ù–ï–®–ù–ò–ú API")
        print("=" * 50)
        
        api_tests = []
        
        # Telegram Bot API
        bot_token = os.getenv("BOT_TOKEN")
        if bot_token:
            api_tests.append({
                "name": "Telegram Bot API",
                "url": f"https://api.telegram.org/bot{bot_token}/getMe",
                "method": "GET",
                "expected_status": 200
            })
        
        # Pyrus API
        pyrus_url = os.getenv("PYRUS_API_URL", "https://api.pyrus.com/v4/")
        if pyrus_url:
            api_tests.append({
                "name": "Pyrus API",
                "url": f"{pyrus_url.rstrip('/')}/auth",
                "method": "POST",
                "data": {
                    "login": os.getenv("PYRUS_LOGIN", "test@example.com"),
                    "security_key": os.getenv("PYRUS_SECURITY_KEY", "dummy")
                },
                "expected_status": [200, 400, 401]  # 400/401 –æ–∂–∏–¥–∞–µ–º—ã –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            })
        
        # Supabase
        supabase_url = os.getenv("SUPABASE_URL")
        if supabase_url:
            api_tests.append({
                "name": "Supabase API",
                "url": f"{supabase_url.rstrip('/')}/rest/v1/",
                "method": "GET",
                "headers": {
                    "apikey": os.getenv("SUPABASE_KEY", "dummy"),
                    "Authorization": f"Bearer {os.getenv('SUPABASE_KEY', 'dummy')}"
                },
                "expected_status": [200, 401, 403]  # 401/403 –æ–∂–∏–¥–∞–µ–º—ã –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –∫–ª—é—á–µ
            })
        
        connectivity_results = {}
        
        try:
            import httpx
            
            async with httpx.AsyncClient(timeout=15.0) as client:
                for test in api_tests:
                    print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {test['name']}...")
                    
                    try:
                        if test["method"] == "GET":
                            response = await client.get(
                                test["url"],
                                headers=test.get("headers", {})
                            )
                        else:  # POST
                            response = await client.post(
                                test["url"],
                                json=test.get("data", {}),
                                headers=test.get("headers", {})
                            )
                        
                        status_ok = response.status_code in (test["expected_status"] if isinstance(test["expected_status"], list) else [test["expected_status"]])
                        
                        connectivity_results[test["name"]] = {
                            "success": status_ok,
                            "status_code": response.status_code,
                            "response_time": response.elapsed.total_seconds() if hasattr(response, 'elapsed') else None,
                            "url": test["url"].replace(bot_token or "dummy", "***TOKEN***") if bot_token else test["url"]
                        }
                        
                        if status_ok:
                            print(f"  ‚úÖ {test['name']}: HTTP {response.status_code} - –î–æ—Å—Ç—É–ø–µ–Ω")
                        else:
                            print(f"  ‚ùå {test['name']}: HTTP {response.status_code} - –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
                            
                    except httpx.TimeoutException:
                        connectivity_results[test["name"]] = {"success": False, "error": "–¢–∞–π–º–∞—É—Ç"}
                        print(f"  ‚ùå {test['name']}: –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                        
                    except Exception as e:
                        connectivity_results[test["name"]] = {"success": False, "error": str(e)}
                        print(f"  ‚ùå {test['name']}: –û—à–∏–±–∫–∞ - {str(e)}")
            
            self.results["api_connectivity"] = connectivity_results
            
            failed_apis = [name for name, result in connectivity_results.items() if not result["success"]]
            if failed_apis:
                self.log_error(f"–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã API: {', '.join(failed_apis)}")
            else:
                self.log_success("–í—Å–µ API –¥–æ—Å—Ç—É–ø–Ω—ã")
                
        except ImportError:
            self.log_error("httpx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å API")
        except Exception as e:
            self.log_error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π", e)

    def check_imports(self):
        """7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞"""
        print("\nüì• 7. –ò–ú–ü–û–†–¢ –ú–û–î–£–õ–ï–ô –ü–†–û–ï–ö–¢–ê")
        print("=" * 50)
        
        modules_to_test = [
            "dotenv",
            "fastapi",
            "uvicorn", 
            "telegram",
            "supabase",
            "httpx",
            "pandas",
            "openpyxl",
            "pytz",
            "pydantic",
            "aiofiles",
            "pytest"
        ]
        
        project_modules = [
            "app.api",
            "app.bot", 
            "app.worker",
            "app.db",
            "app.utils",
            "app.models",
            "app.pyrus_client"
        ]
        
        import_results = {
            "external_packages": {},
            "project_modules": {},
            "failed_external": [],
            "failed_project": []
        }
        
        print("–í–Ω–µ—à–Ω–∏–µ –ø–∞–∫–µ—Ç—ã:")
        for module in modules_to_test:
            try:
                imported_module = importlib.import_module(module)
                version = getattr(imported_module, "__version__", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                import_results["external_packages"][module] = {"success": True, "version": version}
                print(f"  ‚úÖ {module}: –≤–µ—Ä—Å–∏—è {version}")
            except ImportError as e:
                import_results["external_packages"][module] = {"success": False, "error": str(e)}
                import_results["failed_external"].append(module)
                print(f"  ‚ùå {module}: –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ - {str(e)}")
            except Exception as e:
                import_results["external_packages"][module] = {"success": False, "error": str(e)}
                import_results["failed_external"].append(module)
                print(f"  ‚ùå {module}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {str(e)}")
        
        print("\n–ú–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞:")
        for module in project_modules:
            try:
                imported_module = importlib.import_module(module)
                import_results["project_modules"][module] = {"success": True}
                print(f"  ‚úÖ {module}: –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
            except ImportError as e:
                import_results["project_modules"][module] = {"success": False, "error": str(e)}
                import_results["failed_project"].append(module)
                print(f"  ‚ùå {module}: –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ - {str(e)}")
            except Exception as e:
                import_results["project_modules"][module] = {"success": False, "error": str(e)}
                import_results["failed_project"].append(module)
                print(f"  ‚ùå {module}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {str(e)}")
        
        self.results["imports"] = import_results
        
        total_failed = len(import_results["failed_external"]) + len(import_results["failed_project"])
        
        if import_results["failed_external"]:
            self.log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ –ø–∞–∫–µ—Ç—ã: {', '.join(import_results['failed_external'])}")
        
        if import_results["failed_project"]:
            self.log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞: {', '.join(import_results['failed_project'])}")
        
        if total_failed == 0:
            self.log_success("–í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")

    async def check_database_connection(self):
        """8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüóÑÔ∏è  8. –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•")
        print("=" * 50)
        
        try:
            supabase_url = os.getenv("SUPABASE_URL")
            supabase_key = os.getenv("SUPABASE_KEY")
            
            if not supabase_url or not supabase_key:
                self.log_error("SUPABASE_URL –∏–ª–∏ SUPABASE_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                return
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–∞—à –º–æ–¥—É–ª—å db
            try:
                from app.db import db
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                result = db.client.table("users").select("count", count="exact").limit(0).execute()
                
                db_status = {
                    "connection": True,
                    "url": supabase_url,
                    "tables_accessible": True
                }
                
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase: —É—Å–ø–µ—à–Ω–æ")
                print(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ users: —É—Å–ø–µ—à–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                tables_to_check = ["pending_notifications"]
                for table in tables_to_check:
                    try:
                        db.client.table(table).select("count", count="exact").limit(0).execute()
                        print(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ {table}: —É—Å–ø–µ—à–Ω–æ")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table}: –ø—Ä–æ–±–ª–µ–º–∞ –¥–æ—Å—Ç—É–ø–∞ - {str(e)}")
                        db_status[f"table_{table}"] = False
                
                self.results["database"] = db_status
                self.log_success("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞")
                
            except ImportError:
                self.log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å app.db")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                self.results["database"] = {"connection": False, "error": str(e)}
                self.log_error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", e)
                
        except Exception as e:
            self.log_error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", e)

    def check_logs_and_system(self):
        """9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        print("\nüìã 9. –õ–û–ì–ò –ò –°–ò–°–¢–ï–ú–ù–´–ï –†–ï–°–£–†–°–´")
        print("=" * 50)
        
        logs_info = {
            "logs_directory": {},
            "system_logs": {},
            "disk_space": {},
            "memory": {}
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –ª–æ–≥–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
            logs_dir = Path("logs")
            if logs_dir.exists():
                log_files = list(logs_dir.glob("*.log"))
                recent_logs = []
                
                for log_file in log_files:
                    stat = log_file.stat()
                    recent_logs.append({
                        "file": log_file.name,
                        "size": stat.st_size,
                        "modified": datetime.fromtimestamp(stat.st_mtime).isoformat()
                    })
                
                logs_info["logs_directory"] = {
                    "exists": True,
                    "files_count": len(log_files),
                    "recent_logs": recent_logs[:5]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
                }
                
                print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs: {len(log_files)} —Ñ–∞–π–ª–æ–≤")
                for log in recent_logs[:3]:
                    print(f"  üìÑ {log['file']}: {log['size']} –±–∞–π—Ç (–∏–∑–º–µ–Ω–µ–Ω {log['modified']})")
                    
            else:
                logs_info["logs_directory"] = {"exists": False}
                print("‚ö™ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
            disk_usage = self.run_command(["df", "-h", "."])
            if disk_usage["success"]:
                logs_info["disk_space"] = disk_usage["stdout"]
                print(f"üíΩ –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ:\n{disk_usage['stdout']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
            if platform.system() == "Darwin":  # macOS
                memory_cmd = ["vm_stat"]
            else:  # Linux
                memory_cmd = ["free", "-h"]
            
            memory_info = self.run_command(memory_cmd)
            if memory_info["success"]:
                logs_info["memory"] = memory_info["stdout"]
                print(f"üß† –ü–∞–º—è—Ç—å:\n{memory_info['stdout']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–∏—Å—Ç–µ–º—ã
            if platform.system() != "Windows":
                load_avg = self.run_command(["uptime"])
                if load_avg["success"]:
                    logs_info["load_average"] = load_avg["stdout"]
                    print(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {load_avg['stdout']}")
            
            self.results["logs"] = logs_info
            self.log_success("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∞—Ö –∏ —Å–∏—Å—Ç–µ–º–µ —Å–æ–±—Ä–∞–Ω–∞")
            
        except Exception as e:
            self.log_error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤ –∏ —Å–∏—Å—Ç–µ–º—ã", e)

    def check_network_and_firewall(self):
        """10. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        print("\nüåê 10. –°–ï–¢–ï–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò")
        print("=" * 50)
        
        network_info = {}
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
            internet_test = self.run_command(["ping", "-c", "3", "8.8.8.8"])
            network_info["internet"] = {
                "available": internet_test["success"],
                "details": internet_test.get("stdout", internet_test.get("error", ""))
            }
            
            if internet_test["success"]:
                print("‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –¥–æ—Å—Ç—É–ø–Ω–æ")
            else:
                print("‚ùå –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                self.log_error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS
            dns_test = self.run_command(["nslookup", "api.telegram.org"])
            network_info["dns"] = {
                "working": dns_test["success"],
                "details": dns_test.get("stdout", dns_test.get("error", ""))
            }
            
            if dns_test["success"]:
                print("‚úÖ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print("‚ùå DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: –ø—Ä–æ–±–ª–µ–º—ã")
                self.log_error("–ü—Ä–æ–±–ª–µ–º—ã —Å DNS")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω)
            port_check = self.run_command(["netstat", "-tuln"])
            if port_check["success"]:
                network_info["open_ports"] = port_check["stdout"]
                if ":8000" in port_check["stdout"]:
                    print("‚úÖ –ü–æ—Ä—Ç 8000: –æ—Ç–∫—Ä—ã—Ç (API —Å–µ—Ä–≤–µ—Ä)")
                else:
                    print("‚ö™ –ü–æ—Ä—Ç 8000: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
            
            self.results["network"] = network_info
            
        except Exception as e:
            self.log_error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–∏", e)

    def generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if self.results["environment"].get("missing_required"):
            missing = self.results["environment"]["missing_required"]
            recommendations.append(f"üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")
        
        if self.results["packages"].get("missing"):
            missing = self.results["packages"]["missing"]
            recommendations.append(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç—ã: pip install {' '.join(missing)}")
        
        if self.results["packages"].get("version_mismatch"):
            recommendations.append("üì¶ –û–±–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç—ã –¥–æ —Ç—Ä–µ–±—É–µ–º—ã—Ö –≤–µ—Ä—Å–∏–π: pip install -r requirements.txt --upgrade")
        
        if self.results["files"].get("missing_required"):
            missing = self.results["files"]["missing_required"]
            recommendations.append(f"üìÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã: {', '.join(missing)}")
        
        if self.results["files"].get("permission_issues"):
            recommendations.append("üîê –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º: chmod -R 755 app/")
        
        if not self.results["python_info"].get("in_virtualenv"):
            recommendations.append("üêç –°–æ–∑–¥–∞–π—Ç–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        
        api_failures = [name for name, result in self.results["api_connectivity"].items() if not result["success"]]
        if api_failures:
            recommendations.append(f"üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API: {', '.join(api_failures)}")
        
        if not self.results["database"].get("connection"):
            recommendations.append("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase")
        
        if self.results["imports"].get("failed_external"):
            recommendations.append("üì• –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã")
        
        if self.results["imports"].get("failed_project"):
            recommendations.append("üì• –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞")
        
        if not recommendations:
            recommendations.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–∞—Ö.")
        
        self.results["recommendations"] = recommendations
        return recommendations

    async def run_full_diagnostics(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        print("üîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PyrusTelegramBot")
        print("=" * 60)
        print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {Path.cwd()}")
        print("=" * 60)
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.check_system_info()
        self.check_python_info()
        self.check_environment_variables()
        self.check_packages()
        self.check_files_and_permissions()
        await self.check_api_connectivity()
        self.check_imports()
        await self.check_database_connection()
        self.check_logs_and_system()
        self.check_network_and_firewall()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self.generate_recommendations()
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 60)
        
        print(f"\n‚ùå –û—à–∏–±–∫–∏: {len(self.results['errors'])}")
        for error in self.results["errors"]:
            print(f"  {error}")
        
        print(f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(self.results['warnings'])}")
        for warning in self.results["warnings"]:
            print(f"  {warning}")
        
        print(f"\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for i, rec in enumerate(recommendations, 1):
            print(f"  {i}. {rec}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_file = f"diagnostic_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(self.results, f, ensure_ascii=False, indent=2, default=str)
            print(f"\nüíæ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_file}")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        
        print("\n" + "=" * 60)
        return self.results

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1 and sys.argv[1] == "--help":
        print("""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ PyrusTelegramBot
============================

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python system_diagnostics.py [--help]

–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –°–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
2. Python –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ  
3. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
4. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
5. –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
6. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–Ω–µ—à–Ω–∏–º API
7. –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
8. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
9. –õ–æ–≥–∏ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
10. –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ JSON —Ñ–∞–π–ª –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –º–∞—à–∏–Ω–∞–º–∏.
        """)
        return
    
    diagnostics = SystemDiagnostics()
    await diagnostics.run_full_diagnostics()

if __name__ == "__main__":
    asyncio.run(main())

