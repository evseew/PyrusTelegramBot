#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≠—Ç–∞–ø–∞ 5
–ú–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å API, Telegram –±–æ—Ç–∞ –∏ –≤–æ—Ä–∫–µ—Ä –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏—è—Ö
"""
import asyncio
import argparse
import os
import signal
import sys
from typing import List
import subprocess
from pathlib import Path


async def run_api():
    """–ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...")
    process = await asyncio.create_subprocess_exec(
        "uvicorn", "app.api:app", 
        "--host", "0.0.0.0", 
        "--port", "8000", 
        "--reload"
    )
    return process


async def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    process = await asyncio.create_subprocess_exec(
        "python", "-m", "app.bot"
    )
    return process


async def run_worker():
    """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞"""
    print("‚öôÔ∏è –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞...")
    process = await asyncio.create_subprocess_exec(
        "python", "-m", "app.worker"
    )
    return process


async def run_all():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≠—Ç–∞–ø–∞ 5...")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    api_process = await run_api()
    bot_process = await run_bot()
    worker_process = await run_worker()
    
    processes = [api_process, bot_process, worker_process]
    
    print("\n‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã!")
    print("üì° API: http://localhost:8000")
    print("ü§ñ Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
    print("‚öôÔ∏è –í–æ—Ä–∫–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å")
    print("\n–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 60)
    
    try:
        # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        done, pending = await asyncio.wait(
            [asyncio.create_task(p.wait()) for p in processes],
            return_when=asyncio.FIRST_COMPLETED
        )
        
        # –ï—Å–ª–∏ –æ–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        for task in pending:
            task.cancel()
        
        for process in processes:
            if process.returncode is None:
                process.terminate()
                await process.wait()
                
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        
        for process in processes:
            if process.returncode is None:
                process.terminate()
                await process.wait()
        
        print("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    required_vars = [
        "SUPABASE_URL", "SUPABASE_KEY", 
        "PYRUS_WEBHOOK_SECRET", "PYRUS_LOGIN", "PYRUS_SECURITY_KEY"
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º BOT_TOKEN –¥–ª—è Telegram
    bot_token = os.getenv("BOT_TOKEN")
    if not bot_token:
        print("‚ö†Ô∏è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –≤–æ—Ä–∫–µ—Ä –±—É–¥–µ—Ç –≤ DRY_RUN —Ä–µ–∂–∏–º–µ")
    else:
        print("‚úÖ BOT_TOKEN –Ω–∞–π–¥–µ–Ω - —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    required_files = [
        "app/api.py", "app/bot.py", "app/worker.py", 
        "app/db.py", "app/utils.py", "app/models.py"
    ]
    
    for file_path in required_files:
        if not Path(file_path).exists():
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: {file_path}")
            return False
    
    print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
    return True


def main():
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Pyrus Telegram Bot")
    parser.add_argument("--component", 
                       choices=["api", "bot", "worker", "all"], 
                       default="all",
                       help="–ö–∞–∫–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å")
    parser.add_argument("--no-check", action="store_true", 
                       help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not args.no_check and not check_environment():
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    if args.component == "api":
        os.execvp("uvicorn", ["uvicorn", "app.api:app", "--host", "0.0.0.0", "--port", "8000", "--reload"])
    elif args.component == "bot":
        os.execvp("python", ["python", "-m", "app.bot"])
    elif args.component == "worker":
        os.execvp("python", ["python", "-m", "app.worker"])
    elif args.component == "all":
        asyncio.run(run_all())


if __name__ == "__main__":
    main()
