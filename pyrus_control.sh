#!/bin/bash

# üöÄ –£–ü–†–ê–í–õ–ï–ù–ò–ï PYRUS TELEGRAM BOT –°–ò–°–¢–ï–ú–û–ô
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./pyrus_control.sh [–∫–æ–º–∞–Ω–¥–∞]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
error() { echo -e "${RED}‚ùå $1${NC}"; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"; }
info() { echo -e "${BLUE}‚ÑπÔ∏è $1${NC}"; }
header() { echo -e "${PURPLE}üöÄ $1${NC}"; }

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd /root/PyrusTelegramBot 2>/dev/null || {
    error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è /root/PyrusTelegramBot –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
    exit 1
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø–æ–º–æ—â–∏
show_help() {
    header "PYRUS TELEGRAM BOT - –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø"
    echo "========================================"
    echo ""
    echo "üìã –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:"
    echo "  start          - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "  stop           - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã" 
    echo "  restart        - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "  status         - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo ""
    echo "üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï:"
    echo "  enable         - –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (service_enabled=true)"
    echo "  disable        - –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (service_enabled=false)"
    echo "  test-mode      - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–±—ã—Å—Ç—Ä—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã)"
    echo "  prod-mode      - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º (3 —á–∞—Å–∞)"
    echo ""
    echo "üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì:"
    echo "  logs           - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  logs-api       - –õ–æ–≥–∏ —Ç–æ–ª—å–∫–æ API"
    echo "  logs-bot       - –õ–æ–≥–∏ —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç–∞"
    echo "  logs-worker    - –õ–æ–≥–∏ —Ç–æ–ª—å–∫–æ –≤–æ—Ä–∫–µ—Ä–∞"
    echo "  logs-webhooks  - –õ–æ–≥–∏ –≤–µ–±—Ö—É–∫–æ–≤ (raw —Ñ–∞–π–ª—ã)"
    echo "  queue          - –ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    echo "  users          - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    echo ""
    echo "üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:"
    echo "  test-webhook   - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π webhook"
    echo "  test-api       - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API"
    echo "  diagnose       - –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    echo ""
    echo "üîÑ –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï:"
    echo "  update         - –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥ –∏–∑ git"
    echo "  backup         - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"
    echo "  cleanup        - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä: ./pyrus_control.sh start"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    header "–ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–û–í"
    systemctl start pyrus-api pyrus-bot pyrus-worker
    sleep 2
    systemctl status pyrus-api pyrus-bot pyrus-worker --no-pager -l
    success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
stop_services() {
    header "–û–°–¢–ê–ù–û–í–ö–ê –°–ï–†–í–ò–°–û–í"
    systemctl stop pyrus-api pyrus-bot pyrus-worker
    success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
restart_services() {
    header "–ü–ï–†–ï–ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–û–í"
    
    info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã..."
    systemctl stop pyrus-api pyrus-bot pyrus-worker
    sleep 2
    
    info "–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã..."
    systemctl start pyrus-api pyrus-bot pyrus-worker
    sleep 5
    
    info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å..."
    systemctl is-active pyrus-api pyrus-bot pyrus-worker
    
    success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
    warning "–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./pyrus_control.sh status"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞
show_status() {
    header "–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´"
    echo ""
    info "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
    systemctl status pyrus-api pyrus-bot pyrus-worker --no-pager -l
    echo ""
    info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
    echo "üíæ –î–∏—Å–∫: $(df -h / | tail -1 | awk '{print $5 " –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"}')"
    echo "üß† –ü–∞–º—è—Ç—å: $(free -h | grep Mem | awk '{print $3 "/" $2 " –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"}')"
    echo ""
    info "API –ø—Ä–æ–≤–µ—Ä–∫–∞:"
    if curl -s http://localhost:8000/health >/dev/null 2>&1; then
        success "API —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ—Ä—Ç 8000)"
    else
        error "API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
enable_notifications() {
    header "–í–ö–õ–Æ–ß–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô"
    python3 -c "
from dotenv import load_dotenv
load_dotenv()
from app.db import db
db.settings_set('service_enabled', 'true')
print('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –í–ö–õ–Æ–ß–ï–ù–´')
"
    systemctl restart pyrus-worker
    success "–í–æ—Ä–∫–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
disable_notifications() {
    header "–û–¢–ö–õ–Æ–ß–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô"
    python3 -c "
from dotenv import load_dotenv
load_dotenv()
from app.db import db
db.settings_set('service_enabled', 'false')
print('‚è∏Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –û–¢–ö–õ–Æ–ß–ï–ù–´')
"
    success "–û—á–µ—Ä–µ–¥—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –Ω–∞–ø–æ–ª–Ω—è—Ç—å—Å—è, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è"
}

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
test_mode() {
    header "–ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –í –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú"
    
    # –°–æ–∑–¥–∞–µ–º backup —Ç–µ–∫—É—â–µ–≥–æ .env
    cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    sed -i 's/DELAY_HOURS=.*/DELAY_HOURS=0.02/' .env
    sed -i 's/REPEAT_INTERVAL_HOURS=.*/REPEAT_INTERVAL_HOURS=0.03/' .env
    sed -i 's/TTL_HOURS=.*/TTL_HOURS=0.1/' .env
    sed -i 's/QUIET_START=.*/QUIET_START=23:59/' .env
    sed -i 's/QUIET_END=.*/QUIET_END=23:58/' .env
    
    systemctl restart pyrus-worker
    success "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
    warning "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã!"
    info "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω: ./pyrus_control.sh prod-mode"
}

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º
prod_mode() {
    header "–ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –í –ü–†–û–î–ê–ö–®–ù –†–ï–ñ–ò–ú"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–¥–∞–∫—à–Ω –∑–Ω–∞—á–µ–Ω–∏—è
    sed -i 's/DELAY_HOURS=.*/DELAY_HOURS=3/' .env
    sed -i 's/REPEAT_INTERVAL_HOURS=.*/REPEAT_INTERVAL_HOURS=3/' .env
    sed -i 's/TTL_HOURS=.*/TTL_HOURS=24/' .env
    sed -i 's/QUIET_START=.*/QUIET_START=22:00/' .env
    sed -i 's/QUIET_END=.*/QUIET_END=09:00/' .env
    
    systemctl restart pyrus-worker
    success "–ü—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
    info "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ –ø–æ—Å–ª–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤
show_logs() {
    header "–õ–û–ì–ò –í–°–ï–• –°–ï–†–í–ò–°–û–í"
    journalctl -u pyrus-api -u pyrus-bot -u pyrus-worker -f --lines=20
}

show_logs_api() {
    header "–õ–û–ì–ò API"
    journalctl -u pyrus-api -f --lines=30
}

show_logs_bot() {
    header "–õ–û–ì–ò TELEGRAM –ë–û–¢–ê"
    journalctl -u pyrus-bot -f --lines=30
}

show_logs_worker() {
    header "–õ–û–ì–ò –í–û–†–ö–ï–†–ê"
    journalctl -u pyrus-worker -f --lines=30
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤ –≤–µ–±—Ö—É–∫–æ–≤
show_webhook_logs() {
    header "–õ–û–ì–ò PYRUS WEBHOOKS"
    if [ -d "logs" ]; then
        echo "üìÇ –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤:"
        ls -la logs/pyrus_raw_*.ndjson 2>/dev/null || echo "üì≠ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤"
        echo ""
        echo "üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π:"
        tail -10 logs/pyrus_raw_*.ndjson 2>/dev/null | jq -r '.timestamp + " | " + .status + " | " + (.payload.event // "unknown")' 2>/dev/null || tail -10 logs/pyrus_raw_*.ndjson 2>/dev/null || echo "–ù–µ—Ç –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    else
        echo "üìÇ –ü–∞–ø–∫–∞ logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –æ—á–µ—Ä–µ–¥–∏
show_queue() {
    header "–û–ß–ï–†–ï–î–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô"
    python3 -c "
from dotenv import load_dotenv
load_dotenv()
from app.db import db
from datetime import datetime
import pytz

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
service_enabled = db.settings_get('service_enabled')
print(f'üìä –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {service_enabled}')

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å
result = db.client.table('pending_notifications').select('*').execute()
print(f'üì¨ –ó–∞–ø–∏—Å–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏: {len(result.data)}')

if result.data:
    print()
    print('üìã –î–µ—Ç–∞–ª–∏ –æ—á–µ—Ä–µ–¥–∏:')
    for i, record in enumerate(result.data, 1):
        next_send = record['next_send_at']
        print(f'{i}. Task {record[\"task_id\"]} ‚Üí User {record[\"user_id\"]}')
        print(f'   –û—Ç–ø—Ä–∞–≤–∏—Ç—å: {next_send}')
        print(f'   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑: {record[\"times_sent\"]}')
        print()
else:
    print('üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞')
"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
show_users() {
    header "–ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò"
    python3 -c "
from dotenv import load_dotenv
load_dotenv()
from app.db import db

users = db.get_all_users()
print(f'üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}')

if users:
    print()
    for i, user in enumerate(users, 1):
        print(f'{i}. {user.full_name or f\"User {user.user_id}\"}')
        print(f'   Pyrus ID: {user.user_id}')
        print(f'   Telegram: {user.telegram_id}')
        print(f'   –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or \"–Ω–µ —É–∫–∞–∑–∞–Ω\"}')
        print()
else:
    print('üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    print('üí° –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start')
"
}

# –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ webhook
test_webhook() {
    header "–¢–ï–°–¢ WEBHOOK"
    
    USER_ID=164266775  # –í–∞—à ID
    
    curl -X POST http://localhost:8000/pyrus/webhook \
        -H "Content-Type: application/json" \
        -d '{
            "event": "comment",
            "task": {
                "id": 99999,
                "subject": "–¢–ï–°–¢–û–í–ê–Ø –∑–∞–¥–∞—á–∞",
                "comments": [{
                    "id": 888888,
                    "text": "–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–∫—Ä–∏–ø—Ç–∞!",
                    "create_date": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
                    "author": {"id": 777, "first_name": "Test", "last_name": "Script"},
                    "mentions": ['$USER_ID']
                }]
            },
            "actor": {"id": 777, "first_name": "Test", "last_name": "Script"}
        }'
    
    echo ""
    success "–¢–µ—Å—Ç–æ–≤—ã–π webhook –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
    info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤–æ—Ä–∫–µ—Ä–∞: ./pyrus_control.sh logs-worker"
}

# –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞ API
test_api() {
    header "–¢–ï–°–¢ API"
    
    echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint... "
    if curl -s http://localhost:8000/health | grep -q "ok"; then
        success "API —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        error "API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
    
    echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ webhook endpoint... "
    RESPONSE=$(curl -s -X POST http://localhost:8000/pyrus/webhook \
        -H "Content-Type: application/json" \
        -d '{"event":"test","task":{"id":1}}')
    
    if echo "$RESPONSE" | grep -q "webhook processed"; then
        success "Webhook endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        error "Webhook endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞
update_code() {
    header "–û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–û–î–ê"
    
    git stash push -m "Auto stash before update $(date)"
    git pull origin main
    pip3 install -r requirements.txt
    
    success "–ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω"
    warning "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã: ./pyrus_control.sh restart"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è backup
create_backup() {
    header "–°–û–ó–î–ê–ù–ò–ï –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò"
    
    BACKUP_NAME="backup_$(date +%Y%m%d_%H%M%S).tar.gz"
    tar -czf ~/backups/$BACKUP_NAME . --exclude='.git' --exclude='logs' --exclude='__pycache__'
    
    success "Backup —Å–æ–∑–¥–∞–Ω: ~/backups/$BACKUP_NAME"
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
cleanup() {
    header "–û–ß–ò–°–¢–ö–ê –°–ò–°–¢–ï–ú–´"
    
    # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
    find logs/ -name "*.ndjson" -mtime +7 -delete 2>/dev/null || true
    
    # –û—á–∏—Å—Ç–∫–∞ Python –∫—ç—à–∞
    find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
    find . -name "*.pyc" -delete 2>/dev/null || true
    
    success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-help}" in
    start)
        start_services
        ;;
    stop)
        stop_services
        ;;
    restart)
        restart_services
        ;;
    status)
        show_status
        ;;
    enable)
        enable_notifications
        ;;
    disable)
        disable_notifications
        ;;
    test-mode)
        test_mode
        ;;
    prod-mode)
        prod_mode
        ;;
    logs)
        show_logs
        ;;
    logs-api)
        show_logs_api
        ;;
    logs-bot)
        show_logs_bot
        ;;
    logs-worker)
        show_logs_worker
        ;;
    logs-webhooks)
        show_webhook_logs
        ;;
    queue)
        show_queue
        ;;
    users)
        show_users
        ;;
    test-webhook)
        test_webhook
        ;;
    test-api)
        test_api
        ;;
    diagnose)
        ./diagnose_system.sh
        ;;
    update)
        update_code
        ;;
    backup)
        create_backup
        ;;
    cleanup)
        cleanup
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        echo ""
        show_help
        exit 1
        ;;
esac
