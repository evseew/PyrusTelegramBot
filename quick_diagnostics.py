#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ PyrusTelegramBot
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
"""
import os
import sys
import json
import subprocess
from pathlib import Path
from datetime import datetime

def check_mark(condition, message):
    """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å —Å–∏–º–≤–æ–ª–æ–º"""
    symbol = "‚úÖ" if condition else "‚ùå"
    print(f"{symbol} {message}")
    return condition

def warning_mark(message):
    """–í—ã–≤–æ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    print(f"‚ö†Ô∏è {message}")

def main():
    print("‚ö° –ë–´–°–¢–†–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PyrusTelegramBot")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {Path.cwd()}")
    print("=" * 50)
    
    issues = []
    warnings = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\nüêç PYTHON –û–ö–†–£–ñ–ï–ù–ò–ï")
    print("-" * 30)
    
    in_venv = hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix)
    if not check_mark(in_venv, f"–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ"):
        issues.append("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
    
    check_mark(True, f"Python –≤–µ—Ä—Å–∏—è: {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("\nüìÅ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´")
    print("-" * 30)
    
    critical_files = [
        "requirements.txt",
        ".env",
        "app/__init__.py", 
        "app/api.py",
        "app/bot.py",
        "app/worker.py",
        "app/db.py"
    ]
    
    missing_files = []
    for file_path in critical_files:
        exists = Path(file_path).exists()
        if not check_mark(exists, f"–§–∞–π–ª {file_path}"):
            missing_files.append(file_path)
    
    if missing_files:
        issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\nüîê –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("-" * 30)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env –µ—Å–ª–∏ –µ—Å—Ç—å
    env_file = Path(".env")
    if env_file.exists():
        check_mark(True, "–§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
        try:
            from dotenv import load_dotenv
            load_dotenv()
        except ImportError:
            warning_mark("python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        check_mark(False, "–§–∞–π–ª .env –ù–ï –ù–ê–ô–î–ï–ù!")
        issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª .env")
    
    critical_env_vars = [
        "BOT_TOKEN",
        "SUPABASE_URL", 
        "SUPABASE_KEY",
        "PYRUS_LOGIN",
        "PYRUS_SECURITY_KEY"
    ]
    
    missing_env = []
    for var in critical_env_vars:
        value = os.getenv(var)
        if value:
            check_mark(True, f"{var} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ({len(value)} —Å–∏–º–≤–æ–ª–æ–≤)")
        else:
            check_mark(False, f"{var} –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê!")
            missing_env.append(var)
    
    if missing_env:
        issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_env)}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    print("\nüì¶ –û–°–ù–û–í–ù–´–ï –ü–ê–ö–ï–¢–´")
    print("-" * 30)
    
    critical_packages = [
        "fastapi",
        "uvicorn",
        "python-telegram-bot",
        "supabase", 
        "httpx",
        "python-dotenv"
    ]
    
    missing_packages = []
    for package in critical_packages:
        try:
            __import__(package.replace("-", "_"))
            check_mark(True, f"–ü–∞–∫–µ—Ç {package}")
        except ImportError:
            check_mark(False, f"–ü–∞–∫–µ—Ç {package} –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!")
            missing_packages.append(package)
    
    if missing_packages:
        issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
    
    # 5. –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
    print("\nüì• –ú–û–î–£–õ–ò –ü–†–û–ï–ö–¢–ê")
    print("-" * 30)
    
    project_modules = ["app.db", "app.bot", "app.api", "app.worker"]
    failed_imports = []
    
    for module in project_modules:
        try:
            __import__(module)
            check_mark(True, f"–ò–º–ø–æ—Ä—Ç {module}")
        except Exception as e:
            check_mark(False, f"–ò–º–ø–æ—Ä—Ç {module}: {str(e)[:50]}...")
            failed_imports.append(module)
    
    if failed_imports:
        issues.append(f"–ù–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –º–æ–¥—É–ª–∏: {', '.join(failed_imports)}")
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ (–±–∞–∑–æ–≤–∞—è)
    print("\nüåê –°–ï–¢–ï–í–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï")
    print("-" * 30)
    
    try:
        result = subprocess.run(["ping", "-c", "1", "8.8.8.8"], 
                              capture_output=True, timeout=5)
        internet_ok = result.returncode == 0
        check_mark(internet_ok, "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        if not internet_ok:
            issues.append("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
    except:
        warning_mark("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    
    # 7. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –ë–´–°–¢–†–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("=" * 50)
    
    if not issues and not warnings:
        print("üéâ –û–¢–õ–ò–ß–ù–û! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        print("   –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É PyrusTelegramBot")
    else:
        if issues:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ ({len(issues)}):")
            for i, issue in enumerate(issues, 1):
                print(f"   {i}. {issue}")
        
        if warnings:
            print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(warnings)}):")
            for i, warning in enumerate(warnings, 1):
                print(f"   {i}. {warning}")
    
    print("\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    if issues:
        print("   1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤—ã—à–µ")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: python system_diagnostics.py")
        print("   3. –°—Ä–∞–≤–Ω–∏—Ç–µ —Å —Ä–∞–±–æ—á–µ–π –º–∞—à–∏–Ω–æ–π")
    else:
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: python system_diagnostics.py")
        print("   2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç: python run_stage5.py --bot")
    
    print("=" * 50)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    return 1 if issues else 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)

