#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ –≠—Ç–∞–ø–∞ 4
"""
import asyncio
import sys
import os
from datetime import datetime, timedelta
sys.path.append('.')

from dotenv import load_dotenv
load_dotenv()

async def test_worker_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –≤–æ—Ä–∫–µ—Ä–∞"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –≤–æ—Ä–∫–µ—Ä–∞...")
    
    try:
        from app.worker import NotificationWorker, run_worker
        print("‚úÖ –í–æ—Ä–∫–µ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

async def test_worker_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ—Ä–∫–µ—Ä–∞"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from app.worker import (
            REPEAT_INTERVAL_HOURS, TTL_HOURS, TZ, 
            QUIET_START, QUIET_END, DRY_RUN
        )
        
        print(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–æ–≤: {REPEAT_INTERVAL_HOURS}—á")
        print(f"‚úÖ TTL: {TTL_HOURS}—á") 
        print(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {TZ}")
        print(f"‚úÖ –¢–∏—Ö–∏–µ —á–∞—Å—ã: {QUIET_START}-{QUIET_END}")
        print(f"‚úÖ –†–µ–∂–∏–º DRY_RUN: {DRY_RUN}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

async def test_worker_methods():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –≤–æ—Ä–∫–µ—Ä–∞"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –≤–æ—Ä–∫–µ—Ä–∞...")
    
    try:
        from app.worker import NotificationWorker
        
        worker = NotificationWorker()
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –≤–æ—Ä–∫–µ—Ä–∞")
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        enabled = worker._is_service_enabled()
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ service_enabled: {enabled}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
        now = datetime.now(worker.timezone)
        records = worker._get_due_records(now)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(records)} —à—Ç")
        
        # –¢–µ—Å—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ (—Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
        batches = worker._group_by_user(records)
        print(f"‚úÖ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {len(batches)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–µ—Ç–æ–¥–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_message_formatting():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    try:
        from app.worker import NotificationWorker
        
        worker = NotificationWorker()
        now = datetime.now(worker.timezone)
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å
        test_record = {
            'task_id': 12345,
            'user_id': 106,
            'last_mention_at': (now - timedelta(hours=5)).isoformat(),
            'last_mention_comment_text': '–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –¥–ª–∏–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –æ–±—Ä–µ–∑–∞—Ç—å—Å—è'
        }
        
        # –¢–µ—Å—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        single_msg = worker._format_single_message(test_record, now)
        print(f"‚úÖ –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        print(f"   {single_msg.split()[0:10]}")  # –ü–µ—Ä–≤—ã–µ 10 —Å–ª–æ–≤
        
        # –¢–µ—Å—Ç –±–∞—Ç—á-—Å–æ–æ–±—â–µ–Ω–∏—è
        multi_msg = worker._format_multi_message([test_record, test_record], now)
        print(f"‚úÖ –ë–∞—Ç—á-—Å–æ–æ–±—â–µ–Ω–∏–µ:")
        print(f"   {multi_msg.split()[0:10]}")  # –ü–µ—Ä–≤—ã–µ 10 —Å–ª–æ–≤
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_single_cycle():
    """–¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤–æ—Ä–∫–µ—Ä–∞"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
    
    try:
        from app.worker import NotificationWorker
        
        worker = NotificationWorker()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª
        await worker._process_cycle()
        print("‚úÖ –û–¥–∏–Ω —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_short_run():
    """–¢–µ—Å—Ç –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ (10 —Å–µ–∫—É–Ω–¥)"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (10 —Å–µ–∫)...")
    
    try:
        from app.worker import NotificationWorker
        
        worker = NotificationWorker()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä –≤ —Ñ–æ–Ω–µ
        worker_task = asyncio.create_task(worker.start())
        
        # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(10)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        worker.stop()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        try:
            await asyncio.wait_for(worker_task, timeout=2.0)
        except asyncio.TimeoutError:
            worker_task.cancel()
        
        print("‚úÖ –ö–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ –≠—Ç–∞–ø–∞ 4")
    print("=" * 60)
    
    success = True
    success &= await test_worker_import()
    success &= await test_worker_configuration()
    success &= await test_worker_methods()
    success &= await test_message_formatting()
    success &= await test_single_cycle()
    success &= await test_short_run()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –í–û–†–ö–ï–†–ê –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –í–æ—Ä–∫–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
        print("‚úÖ –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        print("‚úÖ –¶–∏–∫–ª—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")
        print("\nüîß –ì–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API!")
        print("\nüìã –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤ –ë–î –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ service_enabled=true")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ pending_notifications")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python -m app.worker")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –≤–æ—Ä–∫–µ—Ä–µ, –Ω—É–∂–Ω–æ –∏—Ö –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(main())
