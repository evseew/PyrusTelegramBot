#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≠—Ç–∞–ø–∞ 3
"""
import os
import sys

def check_api_py():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ app/api.py"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ app/api.py...")
    
    with open('app/api.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    checks = [
        ('from dotenv import load_dotenv', '–ò–º–ø–æ—Ä—Ç dotenv'),
        ('from .utils import verify_pyrus_signature', '–ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç'),
        ('from .models import PyrusWebhookPayload', '–ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π'),
        ('from .db import db', '–ò–º–ø–æ—Ä—Ç –ë–î'),
        ('HTTPException', 'HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏—è'),
        ('DEV_SKIP_PYRUS_SIG', 'Dev —Ä–µ–∂–∏–º'),
        ('verify_pyrus_signature(raw_body, PYRUS_WEBHOOK_SECRET, DEV_SKIP_PYRUS_SIG, signature_header)', 'HMAC —Å 4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏'),
        ('PyrusWebhookPayload(**payload_data)', '–ü–∞—Ä—Å–∏–Ω–≥ –≤ –º–æ–¥–µ–ª—å'),
        ('webhook processed', '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'),
        ('raise HTTPException(status_code=400', 'HTTP 400 –¥–ª—è –æ—à–∏–±–æ–∫'),
        ('status: str = "unknown"', '–°—Ç–∞—Ç—É—Å –≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏')
    ]
    
    success = True
    for check, desc in checks:
        if check in content:
            print(f"  ‚úÖ {desc}")
        else:
            print(f"  ‚ùå {desc}: –ù–ï –ù–ê–ô–î–ï–ù–û")
            success = False
    
    return success

def check_utils_py():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ app/utils.py"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ app/utils.py...")
    
    with open('app/utils.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    checks = [
        ('def verify_pyrus_signature(raw_body: bytes, secret: str, dev_skip: bool = False, signature_header: str = "")', '–°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Å 4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏'),
        ('signature_header: –ó–∞–≥–æ–ª–æ–≤–æ–∫ X-Pyrus-Sig', '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è 4-–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞'),
        ('hmac.compare_digest', '–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ'),
        ('sha1=" + hmac.new', '–§–æ—Ä–º–∞—Ç sha1=hash'),
        ('def normalize_phone_e164', '–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞'),
        ('def is_in_quiet_hours', '–¢–∏—Ö–∏–µ —á–∞—Å—ã'),
        ('def schedule_after', '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫'),
        ('Asia/Yekaterinburg', '–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å')
    ]
    
    success = True
    for check, desc in checks:
        if check in content:
            print(f"  ‚úÖ {desc}")
        else:
            print(f"  ‚ùå {desc}: –ù–ï –ù–ê–ô–î–ï–ù–û")
            success = False
    
    return success

def check_models_py():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ app/models.py"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ app/models.py...")
    
    with open('app/models.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    checks = [
        ('class PyrusUser', '–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
        ('class PyrusComment', '–ú–æ–¥–µ–ª—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'),
        ('class PyrusTask', '–ú–æ–¥–µ–ª—å –∑–∞–¥–∞—á–∏'),
        ('class PyrusWebhookPayload', '–ú–æ–¥–µ–ª—å webhook'),
        ('mentions: List[int]', '–ü–æ–ª–µ mentions'),
        ('actor: Optional[PyrusUser]', '–ü–æ–ª–µ actor'),
        ('change: Optional[Dict[str, Any]]', '–ü–æ–ª–µ change')
    ]
    
    success = True
    for check, desc in checks:
        if check in content:
            print(f"  ‚úÖ {desc}")
        else:
            print(f"  ‚ùå {desc}: –ù–ï –ù–ê–ô–î–ï–ù–û")
            success = False
    
    return success

def check_db_py():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ app/db.py"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ app/db.py...")
    
    with open('app/db.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    checks = [
        ('def upsert_user', '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
        ('def get_user', '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
        ('def upsert_or_shift_pending', '–û—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'),
        ('def delete_pending', '–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏'),
        ('def select_due', '–í—ã–±–æ—Ä –≥–æ—Ç–æ–≤—ã—Ö'),
        ('def processed_comment_exists', '–ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å'),
        ('def settings_get', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'),
        ('def log_event', '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'),
        ('from supabase import create_client', '–ò–º–ø–æ—Ä—Ç Supabase')
    ]
    
    success = True
    for check, desc in checks:
        if check in content:
            print(f"  ‚úÖ {desc}")
        else:
            print(f"  ‚ùå {desc}: –ù–ï –ù–ê–ô–î–ï–ù–û")
            success = False
    
    return success

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt...")
    
    with open('requirements.txt', 'r', encoding='utf-8') as f:
        content = f.read()
    
    checks = [
        ('fastapi', 'FastAPI'),
        ('uvicorn', 'Uvicorn'),
        ('supabase', 'Supabase'),
        ('pydantic', 'Pydantic'),
        ('pytz', '–ß–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞'),
        ('python-dotenv', '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è'),
        ('aiofiles', '–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã'),
        ('requests', 'HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤')
    ]
    
    success = True
    for check, desc in checks:
        if check in content:
            print(f"  ‚úÖ {desc}")
        else:
            print(f"  ‚ùå {desc}: –ù–ï –ù–ê–ô–î–ï–ù–û")
            success = False
    
    return success

def check_files_exist():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    
    files = [
        ('app/__init__.py', '–ü–∞–∫–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'),
        ('app/api.py', 'API –º–æ–¥—É–ª—å'),
        ('app/db.py', '–ë–î –º–æ–¥—É–ª—å'),
        ('app/models.py', '–ú–æ–¥–µ–ª–∏'),
        ('app/utils.py', '–£—Ç–∏–ª–∏—Ç—ã'),
        ('schema.sql', '–°—Ö–µ–º–∞ –ë–î'),
        ('env.example', '–ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫'),
        ('test_vps_api.py', '–¢–µ—Å—Ç VPS'),
        ('requirements.txt', '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏')
    ]
    
    success = True
    for file_path, desc in files:
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            print(f"  ‚úÖ {desc}: {size} –±–∞–π—Ç")
        else:
            print(f"  ‚ùå {desc}: –û–¢–°–£–¢–°–¢–í–£–ï–¢")
            success = False
    
    return success

def main():
    print("üöÄ –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –≠–¢–ê–ü–ê 3")
    print("=" * 60)
    
    success = True
    success &= check_files_exist()
    success &= check_api_py()
    success &= check_utils_py() 
    success &= check_models_py()
    success &= check_db_py()
    success &= check_requirements()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ –≠–¢–ê–ü 3 –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í!")
        print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
        print("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        print("‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        print("‚úÖ –°–∏–≥–Ω–∞—Ç—É—Ä—ã —Ñ—É–Ω–∫—Ü–∏–π —Å–æ–≤–º–µ—Å—Ç–∏–º—ã")
        print("\nüîß –ì–û–¢–û–í–´ –ö –ö–û–ú–ú–ò–¢–£ –ò –î–ï–ü–õ–û–Æ!")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –†–ï–ê–õ–ò–ó–ê–¶–ò–ò")
        print("‚ö†Ô∏è  –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º")
    print("=" * 60)

if __name__ == "__main__":
    main()
