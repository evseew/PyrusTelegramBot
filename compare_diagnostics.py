#!/usr/bin/env python3
"""
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –º–∞—à–∏–Ω–∞–º–∏
–ü–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å —Ä–∞–∑–ª–∏—á–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É —Ä–∞–±–æ—á–µ–π –∏ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º–∞–º–∏
"""
import json
import sys
import argparse
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Tuple

class DiagnosticsComparator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    
    def __init__(self):
        self.differences = []
        self.similarities = []
        self.recommendations = []
    
    def load_report(self, file_path: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")
            sys.exit(1)
    
    def compare_values(self, key: str, value1: Any, value2: Any, path: str = "") -> None:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π"""
        current_path = f"{path}.{key}" if path else key
        
        if isinstance(value1, dict) and isinstance(value2, dict):
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏
            all_keys = set(value1.keys()) | set(value2.keys())
            for k in all_keys:
                if k in value1 and k in value2:
                    self.compare_values(k, value1[k], value2[k], current_path)
                elif k in value1:
                    self.differences.append({
                        "path": f"{current_path}.{k}",
                        "type": "missing_in_machine2",
                        "machine1": value1[k],
                        "machine2": None
                    })
                else:
                    self.differences.append({
                        "path": f"{current_path}.{k}",
                        "type": "missing_in_machine1", 
                        "machine1": None,
                        "machine2": value2[k]
                    })
        
        elif isinstance(value1, list) and isinstance(value2, list):
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–∏
            if set(value1) != set(value2):
                self.differences.append({
                    "path": current_path,
                    "type": "list_difference",
                    "machine1": value1,
                    "machine2": value2,
                    "only_in_1": list(set(value1) - set(value2)),
                    "only_in_2": list(set(value2) - set(value1))
                })
            else:
                self.similarities.append({
                    "path": current_path,
                    "value": value1
                })
        
        else:
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if value1 != value2:
                self.differences.append({
                    "path": current_path,
                    "type": "value_difference",
                    "machine1": value1,
                    "machine2": value2
                })
            else:
                self.similarities.append({
                    "path": current_path,
                    "value": value1
                })
    
    def analyze_critical_differences(self, report1: Dict, report2: Dict) -> None:
        """–ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ä–∞–∑–ª–∏—á–∏–π"""
        
        # –†–∞–∑–ª–∏—á–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env1 = report1.get("environment", {})
        env2 = report2.get("environment", {})
        
        missing1 = set(env1.get("missing_required", []))
        missing2 = set(env2.get("missing_required", []))
        
        if missing1 != missing2:
            only_missing_1 = missing1 - missing2
            only_missing_2 = missing2 - missing1
            
            if only_missing_1:
                self.recommendations.append(f"üîß –ù–∞ –º–∞—à–∏–Ω–µ 1 –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(only_missing_1)}")
            if only_missing_2:
                self.recommendations.append(f"üîß –ù–∞ –º–∞—à–∏–Ω–µ 2 –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(only_missing_2)}")
        
        # –†–∞–∑–ª–∏—á–∏—è –≤ –ø–∞–∫–µ—Ç–∞—Ö
        pkg1 = report1.get("packages", {})
        pkg2 = report2.get("packages", {})
        
        missing_pkg1 = set(pkg1.get("missing", []))
        missing_pkg2 = set(pkg2.get("missing", []))
        
        if missing_pkg1 != missing_pkg2:
            only_missing_pkg1 = missing_pkg1 - missing_pkg2
            only_missing_pkg2 = missing_pkg2 - missing_pkg1
            
            if only_missing_pkg1:
                self.recommendations.append(f"üì¶ –ù–∞ –º–∞—à–∏–Ω–µ 1 –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(only_missing_pkg1)}")
            if only_missing_pkg2:
                self.recommendations.append(f"üì¶ –ù–∞ –º–∞—à–∏–Ω–µ 2 –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(only_missing_pkg2)}")
        
        # –†–∞–∑–ª–∏—á–∏—è –≤ –≤–µ—Ä—Å–∏—è—Ö –ø–∞–∫–µ—Ç–æ–≤
        installed1 = pkg1.get("installed", {})
        installed2 = pkg2.get("installed", {})
        
        version_diffs = []
        for pkg_name in set(installed1.keys()) & set(installed2.keys()):
            if installed1[pkg_name] != installed2[pkg_name]:
                version_diffs.append(f"{pkg_name}: {installed1[pkg_name]} vs {installed2[pkg_name]}")
        
        if version_diffs:
            self.recommendations.append(f"üì¶ –†–∞–∑–ª–∏—á–∏—è –≤ –≤–µ—Ä—Å–∏—è—Ö –ø–∞–∫–µ—Ç–æ–≤: {'; '.join(version_diffs[:5])}")
        
        # –†–∞–∑–ª–∏—á–∏—è –≤ Python –≤–µ—Ä—Å–∏—è—Ö
        py1 = report1.get("python_info", {}).get("version_info")
        py2 = report2.get("python_info", {}).get("version_info")
        
        if py1 != py2:
            self.recommendations.append(f"üêç –†–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ Python: {py1} vs {py2}")
        
        # –†–∞–∑–ª–∏—á–∏—è –≤ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö
        api1 = report1.get("api_connectivity", {})
        api2 = report2.get("api_connectivity", {})
        
        for api_name in set(api1.keys()) | set(api2.keys()):
            status1 = api1.get(api_name, {}).get("success", False)
            status2 = api2.get(api_name, {}).get("success", False)
            
            if status1 != status2:
                working = "–º–∞—à–∏–Ω–µ 1" if status1 else "–º–∞—à–∏–Ω–µ 2"
                broken = "–º–∞—à–∏–Ω–µ 2" if status1 else "–º–∞—à–∏–Ω–µ 1"
                self.recommendations.append(f"üåê {api_name}: —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ {working}, –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ {broken}")
        
        # –†–∞–∑–ª–∏—á–∏—è –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö
        imp1 = report1.get("imports", {})
        imp2 = report2.get("imports", {})
        
        failed1 = set(imp1.get("failed_external", []) + imp1.get("failed_project", []))
        failed2 = set(imp2.get("failed_external", []) + imp2.get("failed_project", []))
        
        if failed1 != failed2:
            only_failed1 = failed1 - failed2
            only_failed2 = failed2 - failed1
            
            if only_failed1:
                self.recommendations.append(f"üì• –ù–∞ –º–∞—à–∏–Ω–µ 1 –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è: {', '.join(only_failed1)}")
            if only_failed2:
                self.recommendations.append(f"üì• –ù–∞ –º–∞—à–∏–Ω–µ 2 –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è: {', '.join(only_failed2)}")
    
    def compare_reports(self, report1: Dict, report2: Dict, machine1_name: str, machine2_name: str) -> None:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤"""
        print(f"üîç –°–†–ê–í–ù–ï–ù–ò–ï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        print("=" * 60)
        print(f"–ú–∞—à–∏–Ω–∞ 1: {machine1_name}")
        print(f"–ú–∞—à–∏–Ω–∞ 2: {machine2_name}")
        print(f"–í—Ä–µ–º—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 60)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è
        self.analyze_critical_differences(report1, report2)
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ–±—â–∏–µ —Å–µ–∫—Ü–∏–∏
        sections_to_compare = [
            "system_info",
            "python_info", 
            "environment",
            "packages",
            "files",
            "api_connectivity",
            "imports",
            "database",
            "network"
        ]
        
        for section in sections_to_compare:
            if section in report1 and section in report2:
                self.compare_values(section, report1[section], report2[section])
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.print_comparison_results(machine1_name, machine2_name)
    
    def print_comparison_results(self, machine1_name: str, machine2_name: str) -> None:
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–ª–∏—á–∏—è
        if self.recommendations:
            print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –†–ê–ó–õ–ò–ß–ò–Ø ({len(self.recommendations)}):")
            print("-" * 50)
            for i, rec in enumerate(self.recommendations, 1):
                print(f"{i:2d}. {rec}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–∏—è –ø–æ —Ç–∏–ø–∞–º
        env_diffs = [d for d in self.differences if d["path"].startswith("environment")]
        pkg_diffs = [d for d in self.differences if d["path"].startswith("packages")]
        system_diffs = [d for d in self.differences if d["path"].startswith("system_info")]
        other_diffs = [d for d in self.differences if not any(d["path"].startswith(p) for p in ["environment", "packages", "system_info"])]
        
        # –†–∞–∑–ª–∏—á–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if env_diffs:
            print(f"\nüîê –†–ê–ó–õ–ò–ß–ò–Ø –í –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ({len(env_diffs)}):")
            print("-" * 50)
            for diff in env_diffs[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                path = diff["path"].replace("environment.", "")
                if diff["type"] == "value_difference":
                    print(f"  üìù {path}")
                    print(f"     {machine1_name}: {diff['machine1']}")
                    print(f"     {machine2_name}: {diff['machine2']}")
                elif diff["type"] == "list_difference":
                    print(f"  üìù {path}")
                    if diff.get("only_in_1"):
                        print(f"     –¢–æ–ª—å–∫–æ –≤ {machine1_name}: {diff['only_in_1']}")
                    if diff.get("only_in_2"):
                        print(f"     –¢–æ–ª—å–∫–æ –≤ {machine2_name}: {diff['only_in_2']}")
        
        # –†–∞–∑–ª–∏—á–∏—è –≤ –ø–∞–∫–µ—Ç–∞—Ö
        if pkg_diffs:
            print(f"\nüì¶ –†–ê–ó–õ–ò–ß–ò–Ø –í –ü–ê–ö–ï–¢–ê–• ({len(pkg_diffs)}):")
            print("-" * 50)
            for diff in pkg_diffs[:10]:
                path = diff["path"].replace("packages.", "")
                if diff["type"] == "value_difference":
                    print(f"  üìù {path}: {diff['machine1']} vs {diff['machine2']}")
                elif diff["type"] == "list_difference" and diff.get("only_in_1"):
                    print(f"  üìù {path} —Ç–æ–ª—å–∫–æ –≤ {machine1_name}: {diff['only_in_1']}")
                elif diff["type"] == "list_difference" and diff.get("only_in_2"):
                    print(f"  üìù {path} —Ç–æ–ª—å–∫–æ –≤ {machine2_name}: {diff['only_in_2']}")
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è
        if system_diffs:
            print(f"\nüñ•Ô∏è –°–ò–°–¢–ï–ú–ù–´–ï –†–ê–ó–õ–ò–ß–ò–Ø ({len(system_diffs)}):")
            print("-" * 50)
            for diff in system_diffs[:10]:
                path = diff["path"].replace("system_info.", "")
                if diff["type"] == "value_difference":
                    print(f"  üìù {path}: {diff['machine1']} vs {diff['machine2']}")
        
        # –ü—Ä–æ—á–∏–µ —Ä–∞–∑–ª–∏—á–∏—è
        if other_diffs:
            print(f"\nüîß –ü–†–û–ß–ò–ï –†–ê–ó–õ–ò–ß–ò–Ø ({len(other_diffs)}):")
            print("-" * 50)
            for diff in other_diffs[:5]:
                if diff["type"] == "value_difference":
                    print(f"  üìù {diff['path']}: {diff['machine1']} vs {diff['machine2']}")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–†–ê–í–ù–ï–ù–ò–Ø:")
        print("-" * 50)
        print(f"  üìù –í—Å–µ–≥–æ —Ä–∞–∑–ª–∏—á–∏–π: {len(self.differences)}")
        print(f"  ‚úÖ –û–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {len(self.similarities)}")
        print(f"  üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: {len(self.recommendations)}")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        print(f"\nüéØ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
        print("-" * 50)
        if not self.recommendations:
            print("  ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞–∑–ª–∏—á–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            print("  üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –¥–µ—Ç–∞–ª–∏ —Ä–∞–∑–ª–∏—á–∏–π –≤—ã—à–µ")
        else:
            print("  1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–ª–∏—á–∏—è (—Å–ø–∏—Å–æ–∫ –≤—ã—à–µ)")
            print("  2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ –≤–µ—Ä—Å–∏–∏ –ø–∞–∫–µ—Ç–æ–≤")
            print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            print("  4. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É")
    
    def save_comparison_report(self, filename: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        report = {
            "timestamp": datetime.now().isoformat(),
            "differences": self.differences,
            "similarities": len(self.similarities),
            "recommendations": self.recommendations,
            "summary": {
                "total_differences": len(self.differences),
                "critical_issues": len(self.recommendations)
            }
        }
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(report, f, ensure_ascii=False, indent=2, default=str)
            print(f"\nüíæ –û—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

def main():
    parser = argparse.ArgumentParser(description="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ PyrusTelegramBot")
    parser.add_argument("report1", help="–ü—É—Ç—å –∫ –ø–µ—Ä–≤–æ–º—É –æ—Ç—á–µ—Ç—É (JSON)")
    parser.add_argument("report2", help="–ü—É—Ç—å –∫ –≤—Ç–æ—Ä–æ–º—É –æ—Ç—á–µ—Ç—É (JSON)")
    parser.add_argument("--name1", default="–ú–∞—à–∏–Ω–∞ 1", help="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –º–∞—à–∏–Ω—ã")
    parser.add_argument("--name2", default="–ú–∞—à–∏–Ω–∞ 2", help="–ù–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –º–∞—à–∏–Ω—ã")
    parser.add_argument("--output", help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    if not Path(args.report1).exists():
        print(f"‚ùå –§–∞–π–ª {args.report1} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)
    
    if not Path(args.report2).exists():
        print(f"‚ùå –§–∞–π–ª {args.report2} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
    comparator = DiagnosticsComparator()
    
    print("üìñ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–æ–≤...")
    report1 = comparator.load_report(args.report1)
    report2 = comparator.load_report(args.report2)
    
    comparator.compare_reports(report1, report2, args.name1, args.name2)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª
    if args.output:
        comparator.save_comparison_report(args.output)
    
    print("\n" + "=" * 60)

if __name__ == "__main__":
    main()

