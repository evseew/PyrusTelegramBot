#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —ç—Ç–∞–ø–∞ 2
"""
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_env():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = {
        'SUPABASE_URL': 'URL –ø—Ä–æ–µ–∫—Ç–∞ Supabase',
        'SUPABASE_KEY': 'API –∫–ª—é—á Supabase', 
        'TZ': '–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å',
        'DELAY_HOURS': '–ó–∞–¥–µ—Ä–∂–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
        'DEV_SKIP_PYRUS_SIG': '–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'
    }
    
    success = True
    for var, desc in required_vars.items():
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}: {desc} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            print(f"‚ùå {var}: {desc} - –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            success = False
    
    return success

def test_imports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã"""
    print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç
        from app.utils import normalize_phone_e164, is_in_quiet_hours, schedule_after, verify_pyrus_signature
        print("‚úÖ –£—Ç–∏–ª–∏—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π
        from app.models import PyrusWebhookPayload, User, PendingNotification
        print("‚úÖ –ú–æ–¥–µ–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —É—Ç–∏–ª–∏—Ç
        phone = normalize_phone_e164("8-912-345-67-89")
        assert phone == "+79123456789", f"–û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {phone}"
        print("‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç HMAC
        hmac_result = verify_pyrus_signature(b'test', 'secret', dev_skip=True)
        assert hmac_result == True, "HMAC –≤ dev —Ä–µ–∂–∏–º–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True"
        print("‚úÖ HMAC —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã"""
    print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        'app/api.py',
        'app/db.py', 
        'app/utils.py',
        'app/models.py',
        'schema.sql',
        '.env',
        'requirements.txt'
    ]
    
    success = True
    for file_path in required_files:
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            print(f"‚úÖ {file_path}: {size} –±–∞–π—Ç")
        else:
            print(f"‚ùå {file_path}: —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            success = False
    
    return success

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≠—Ç–∞–ø–∞ 2")
    print("=" * 50)
    
    success = True
    success &= test_env()
    success &= test_imports() 
    success &= test_files()
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ –≠–¢–ê–ü 2 –ó–ê–í–ï–†–®–Å–ù –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã")
        print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ –≤ Supabase")
        print("‚úÖ –£—Ç–∏–ª–∏—Ç—ã –∏ –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("\nüöÄ –ì–û–¢–û–í–´ –ö –≠–¢–ê–ü–£ 3!")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –Ω—É–∂–Ω–æ –∏—Ö –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
    print("=" * 50)

if __name__ == "__main__":
    main()
