#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤–æ—Ä–∫–µ—Ä–∞ —Å —Ä–µ–∞–ª—å–Ω–æ–π –ë–î
"""
import asyncio
import sys
import os
from datetime import datetime, timedelta
sys.path.append('.')

from dotenv import load_dotenv
load_dotenv()

async def test_database_setup():
    """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    print("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤...")
    
    try:
        from app.db import db
        
        # –í–∫–ª—é—á–∞–µ–º —Å–µ—Ä–≤–∏—Å
        db.settings_set('service_enabled', 'true')
        print("‚úÖ –°–µ—Ä–≤–∏—Å –≤–∫–ª—é—á–µ–Ω (service_enabled=true)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        enabled = db.settings_get('service_enabled')
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {enabled}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î: {e}")
        return False

async def test_create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î"""
    print("\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from app.db import db
        from datetime import datetime, timezone
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user_id = 999
        test_telegram_id = 999999999
        
        db.upsert_user(
            user_id=test_user_id,
            telegram_id=test_telegram_id,
            phone="+79999999999",
            full_name="–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        )
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_user_id}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏ (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é)
        past_time = datetime.now(timezone.utc) - timedelta(minutes=5)
        next_send_time = datetime.now(timezone.utc) - timedelta(minutes=1)  # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ 1 –º–∏–Ω—É—Ç—É
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Å—Ç–∞–≤–∫—É –∑–∞–ø–∏—Å–∏ –Ω–∞–ø—Ä—è–º—É—é (–æ–±—Ö–æ–¥–∏–º upsert_or_shift_pending)
        data = {
            "task_id": 999,
            "user_id": test_user_id,
            "first_mention_at": past_time.isoformat(),
            "last_mention_at": past_time.isoformat(),
            "last_mention_comment_id": 999,
            "last_mention_comment_text": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞ @TestUser",
            "next_send_at": next_send_time.isoformat(),
            "times_sent": 0
        }
        
        db.client.table("pending_notifications").insert(data).execute()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏ (task_id=999)")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_worker_with_real_data():
    """–¢–µ—Å—Ç –≤–æ—Ä–∫–µ—Ä–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ –ë–î"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    try:
        from app.worker import NotificationWorker
        
        worker = NotificationWorker()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å –≤–∫–ª—é—á–µ–Ω
        enabled = worker._is_service_enabled()
        print(f"‚úÖ –°–µ—Ä–≤–∏—Å –≤–∫–ª—é—á–µ–Ω: {enabled}")
        
        if not enabled:
            print("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
            return True
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª
        print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        await worker._process_cycle()
        
        print("‚úÖ –¶–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –ë–î")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_check_logs():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –≤ –ë–î"""
    print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –≤ –ë–î...")
    
    try:
        from app.db import db
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–æ–≥–æ–≤
        result = db.client.table("logs").select("*").order("ts", desc=True).limit(5).execute()
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(result.data)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π:")
        for log in result.data:
            event = log.get('event', 'unknown')
            ts = log.get('ts', 'unknown')
            print(f"   - {event} ({ts})")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤: {e}")
        return False

async def test_cleanup():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîÑ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from app.db import db
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
        db.client.table("pending_notifications").delete().eq("task_id", 999).execute()
        db.client.table("users").delete().eq("user_id", 999).execute()
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤–æ—Ä–∫–µ—Ä–∞ —Å –ë–î")
    print("=" * 60)
    
    success = True
    success &= await test_database_setup()
    success &= await test_create_test_data()
    success &= await test_worker_with_real_data()
    success &= await test_check_logs()
    success &= await test_cleanup()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –í–æ—Ä–∫–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω–æ–π –ë–î")
        print("‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏")
        print("‚úÖ –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ –ë–î")
        print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("\nüîß –≠–¢–ê–ü 4 –ó–ê–í–ï–†–®–Å–ù –£–°–ü–ï–®–ù–û!")
        print("\nüìã –î–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –∑–∞–ø—É—Å–∫–∞:")
        print("1. python -m app.worker (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ)")
        print("2. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ª–æ–≥–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ logs")
        print("3. –í –≠—Ç–∞–ø–µ 5 –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(main())
