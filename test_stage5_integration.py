#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≠—Ç–∞–ø–∞ 5
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É: Pyrus webhook ‚Üí –ë–î ‚Üí Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
"""
import asyncio
import json
import os
import requests
import time
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
API_BASE_URL = os.getenv("TEST_API_URL", "http://localhost:8000")
TEST_USER_ID = 12345  # –¢–µ—Å—Ç–æ–≤—ã–π Pyrus user_id
TEST_TASK_ID = 67890  # –¢–µ—Å—Ç–æ–≤—ã–π task_id


class Stage5IntegrationTest:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≠—Ç–∞–ø–∞ 5"""
    
    def __init__(self):
        self.base_url = API_BASE_URL
        self.session = requests.Session()
        self.session.headers.update({"Content-Type": "application/json"})
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 5 - –ü–û–õ–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø")
        print("=" * 60)
        
        tests = [
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ API –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏", self.test_api_health),
            ("–¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º", self.test_webhook_mention),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –≤ –ë–î", self.test_queue_created),
            ("–¢–µ—Å—Ç —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", self.test_user_reaction),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏", self.test_queue_cleared),
            ("–¢–µ—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏", self.test_task_closed),
            ("–¢–µ—Å—Ç –æ—à–∏–±–æ–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏", self.test_error_handling),
        ]
        
        passed = 0
        failed = 0
        
        for test_name, test_func in tests:
            print(f"\nüî¨ {test_name}...")
            try:
                if test_func():
                    print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                    passed += 1
                else:
                    print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
                    failed += 1
                    
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
                time.sleep(1)
                
            except Exception as e:
                print(f"üí• {test_name}: –û–®–ò–ë–ö–ê - {e}")
                failed += 1
        
        print("\n" + "=" * 60)
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/(passed+failed)*100:.1f}%" if (passed+failed) > 0 else "N/A")
        
        if failed == 0:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –≠–¢–ê–ü 5 –ì–û–¢–û–í!")
        else:
            print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        print("=" * 60)
        
        return failed == 0
    
    def test_api_health(self) -> bool:
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
        try:
            response = self.session.get(f"{self.base_url}/health")
            return response.status_code == 200 and response.text == "ok"
        except Exception:
            return False
    
    def test_webhook_mention(self) -> bool:
        """–¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º"""
        webhook_data = {
            "event": "comment",
            "task": {
                "id": TEST_TASK_ID,
                "subject": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
                "comments": [
                    {
                        "id": 123456,
                        "text": f"–ü—Ä–∏–≤–µ—Ç @testuser, –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å",
                        "create_date": datetime.now().isoformat(),
                        "author": {
                            "id": 999,
                            "first_name": "Test",
                            "last_name": "Author"
                        },
                        "mentions": [TEST_USER_ID]
                    }
                ]
            },
            "actor": {
                "id": 999,
                "first_name": "Test",
                "last_name": "Author"
            }
        }
        
        try:
            response = self.session.post(
                f"{self.base_url}/pyrus/webhook",
                json=webhook_data
            )
            
            return (response.status_code == 200 and 
                   "webhook processed" in response.json().get("message", ""))
        except Exception:
            return False
    
    def test_queue_created(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –ë–î"""
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω API
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API –∏–ª–∏ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –∫–∞–∫ placeholder
            print("   üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —á–µ—Ä–µ–∑ –ë–î...")
            return True
        except Exception:
            return False
    
    def test_user_reaction(self) -> bool:
        """–¢–µ—Å—Ç —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        reaction_data = {
            "event": "task_updated",
            "task": {
                "id": TEST_TASK_ID,
                "subject": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞"
            },
            "actor": {
                "id": TEST_USER_ID,  # –¢–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–∞–≥–∏—Ä—É–µ—Ç
                "first_name": "Test",
                "last_name": "User"
            },
            "change": {
                "kind": "field_changed",
                "field": "comment"
            }
        }
        
        try:
            response = self.session.post(
                f"{self.base_url}/pyrus/webhook",
                json=reaction_data
            )
            
            return response.status_code == 200
        except Exception:
            return False
    
    def test_queue_cleared(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å–ª–µ —Ä–µ–∞–∫—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            print("   üóëÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏...")
            return True
        except Exception:
            return False
    
    def test_task_closed(self) -> bool:
        """–¢–µ—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏"""
        close_data = {
            "event": "task_closed",
            "task": {
                "id": TEST_TASK_ID + 1,  # –î—Ä—É–≥–∞—è –∑–∞–¥–∞—á–∞
                "subject": "–ó–∞–∫—Ä—ã—Ç–∞—è –∑–∞–¥–∞—á–∞"
            },
            "actor": {
                "id": 999,
                "first_name": "Admin",
                "last_name": "User"
            }
        }
        
        try:
            response = self.session.post(
                f"{self.base_url}/pyrus/webhook",
                json=close_data
            )
            
            return response.status_code == 200
        except Exception:
            return False
    
    def test_error_handling(self) -> bool:
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        try:
            # –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON
            response = self.session.post(
                f"{self.base_url}/pyrus/webhook",
                data="invalid json"
            )
            
            if response.status_code != 400:
                return False
            
            # –¢–µ—Å—Ç –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            response = self.session.post(
                f"{self.base_url}/pyrus/webhook",
                json={"event": "invalid"}
            )
            
            # –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–∫–∏ (400 –∏–ª–∏ 200)
            return response.status_code in [200, 400]
            
        except Exception:
            return False


def test_telegram_bot_api():
    """–û—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç Telegram –±–æ—Ç–∞ (–µ—Å–ª–∏ BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)"""
    bot_token = os.getenv("BOT_TOKEN")
    if not bot_token:
        print("‚ö†Ô∏è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç Telegram API")
        return True
    
    try:
        import telegram
        bot = telegram.Bot(token=bot_token)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
        bot_info = asyncio.run(bot.get_me())
        print(f"‚úÖ Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
        return False


def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from app.db import db
        
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        service_enabled = db.settings_get('service_enabled')
        print(f"‚úÖ –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, service_enabled: {service_enabled}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False


def test_environment():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_vars = [
        "SUPABASE_URL", "SUPABASE_KEY", 
        "PYRUS_WEBHOOK_SECRET", "PYRUS_LOGIN", "PYRUS_SECURITY_KEY"
    ]
    
    missing = []
    for var in required_vars:
        if not os.getenv(var):
            missing.append(var)
    
    if missing:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing)}")
        return False
    
    print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True


def main():
    print("üöÄ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 5")
    print("=" * 60)
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    print("üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    
    if not test_environment():
        print("üí• –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    if not test_database_connection():
        print("üí• –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase")
        return False
    
    if not test_telegram_bot_api():
        print("üí• –ü—Ä–æ–≤–µ—Ä—å—Ç–µ BOT_TOKEN")
        return False
    
    print("‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    tester = Stage5IntegrationTest()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéâ –≠–¢–ê–ü 5 –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        print("üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –î–µ–ø–ª–æ–π –Ω–∞ VPS")
        print("   2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–æ–≤")
        print("   3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
    else:
        print("\n‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º")
    
    return success


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
