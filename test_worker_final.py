#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤–æ—Ä–∫–µ—Ä–∞ (–±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î –∏–∑-–∑–∞ RLS)
"""
import asyncio
import sys
sys.path.append('.')

from dotenv import load_dotenv
load_dotenv()

async def test_worker_architecture():
    """–¢–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≤–æ—Ä–∫–µ—Ä–∞"""
    print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≤–æ—Ä–∫–µ—Ä–∞...")
    
    try:
        from app.worker import NotificationWorker
        
        worker = NotificationWorker()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        assert hasattr(worker, '_process_cycle'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç _process_cycle"
        assert hasattr(worker, '_is_service_enabled'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç _is_service_enabled"
        assert hasattr(worker, '_get_due_records'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç _get_due_records"
        assert hasattr(worker, '_group_by_user'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç _group_by_user"
        assert hasattr(worker, '_send_user_batch'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç _send_user_batch"
        assert hasattr(worker, '_format_batch_message'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç _format_batch_message"
        assert hasattr(worker, '_update_records_after_sending'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç _update_records_after_sending"
        
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: {e}")
        return False

async def test_message_formats():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ PRD"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    try:
        from app.worker import NotificationWorker
        from datetime import datetime, timezone, timedelta
        
        worker = NotificationWorker()
        now = datetime.now(timezone.utc)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_record_1 = {
            'task_id': 12345,
            'user_id': 106,
            'last_mention_at': (now - timedelta(hours=5)).isoformat(),
            'last_mention_comment_text': '–ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'
        }
        
        test_record_2 = {
            'task_id': 67890,
            'user_id': 106,
            'last_mention_at': (now - timedelta(hours=10)).isoformat(),
            'last_mention_comment_text': '–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω –ø–æ –¥–ª–∏–Ω–µ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º TRUNC_COMMENT_LEN'
        }
        
        # –¢–µ—Å—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        single_msg = worker._format_single_message(test_record_1, now)
        print("‚úÖ –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç '–ø—Ä–æ—Å—Ä–æ—á–∏–ª–∏ –æ—Ç–≤–µ—Ç': {'–ø—Ä–æ—Å—Ä–æ—á–∏–ª–∏ –æ—Ç–≤–µ—Ç' in single_msg}")
        print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç task_id: {str(test_record_1['task_id']) in single_msg}")
        print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É pyrus.com: {'pyrus.com' in single_msg}")
        
        # –¢–µ—Å—Ç –±–∞—Ç—á-—Å–æ–æ–±—â–µ–Ω–∏—è
        batch_msg = worker._format_multi_message([test_record_1, test_record_2], now)
        print("‚úÖ –ë–∞—Ç—á-—Å–æ–æ–±—â–µ–Ω–∏–µ:")
        print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫: {'–ü–æ –≤–∞–º –µ—Å—Ç—å –∑–∞–¥–∞—á–∏' in batch_msg}")
        print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç –æ–±–∞ task_id: {str(test_record_1['task_id']) in batch_msg and str(test_record_2['task_id']) in batch_msg}")
        print(f"   –û–±—Ä–µ–∑–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {len(batch_msg) < 1000}")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ–π –¥–ª–∏–Ω—ã
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_time_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏...")
    
    try:
        from app.worker import NotificationWorker
        from app.utils import is_in_quiet_hours
        from datetime import datetime
        import pytz
        
        worker = NotificationWorker()
        tz = pytz.timezone("Asia/Yekaterinburg")
        
        # –¢–µ—Å—Ç —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤
        night_time = tz.localize(datetime(2025, 1, 20, 23, 30))  # 23:30
        day_time = tz.localize(datetime(2025, 1, 20, 14, 30))    # 14:30
        
        night_quiet = is_in_quiet_hours(night_time, "Asia/Yekaterinburg", "22:00", "09:00")
        day_quiet = is_in_quiet_hours(day_time, "Asia/Yekaterinburg", "22:00", "09:00")
        
        print(f"‚úÖ –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (23:30) –≤ —Ç–∏—Ö–∏—Ö —á–∞—Å–∞—Ö: {night_quiet}")
        print(f"‚úÖ –î–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è (14:30) –ù–ï –≤ —Ç–∏—Ö–∏—Ö —á–∞—Å–∞—Ö: {not day_quiet}")
        
        assert night_quiet == True, "–ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–∏—Ö–∏—Ö —á–∞—Å–∞—Ö"
        assert day_quiet == False, "–î–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–∏—Ö–∏—Ö —á–∞—Å–∞—Ö"
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return False

async def test_grouping_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏...")
    
    try:
        from app.worker import NotificationWorker
        
        worker = NotificationWorker()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        test_records = [
            {'user_id': 106, 'task_id': 1},
            {'user_id': 107, 'task_id': 2},
            {'user_id': 106, 'task_id': 3},  # –í—Ç–æ—Ä–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 106
            {'user_id': 108, 'task_id': 4},
        ]
        
        batches = worker._group_by_user(test_records)
        
        print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(batches)}")
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 106 –∏–º–µ–µ—Ç 2 –∑–∞–¥–∞—á–∏: {len(batches.get(106, [])) == 2}")
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 107 –∏–º–µ–µ—Ç 1 –∑–∞–¥–∞—á—É: {len(batches.get(107, [])) == 1}")
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 108 –∏–º–µ–µ—Ç 1 –∑–∞–¥–∞—á—É: {len(batches.get(108, [])) == 1}")
        
        assert len(batches) == 3, f"–û–∂–∏–¥–∞–ª–æ—Å—å 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–µ–Ω–æ {len(batches)}"
        assert len(batches[106]) == 2, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 106 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –∑–∞–¥–∞—á–∏"
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: {e}")
        return False

async def test_configuration_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from app.worker import (
            REPEAT_INTERVAL_HOURS, TTL_HOURS, TZ, 
            QUIET_START, QUIET_END, TRUNC_TASK_TITLE_LEN, 
            TRUNC_COMMENT_LEN, DRY_RUN
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∏ —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        assert isinstance(REPEAT_INTERVAL_HOURS, float), "REPEAT_INTERVAL_HOURS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å float"
        assert isinstance(TTL_HOURS, float), "TTL_HOURS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å float"
        assert isinstance(TZ, str), "TZ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"
        assert isinstance(TRUNC_TASK_TITLE_LEN, int), "TRUNC_TASK_TITLE_LEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å int"
        assert isinstance(TRUNC_COMMENT_LEN, int), "TRUNC_COMMENT_LEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å int"
        assert isinstance(DRY_RUN, bool), "DRY_RUN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å bool"
        
        assert REPEAT_INTERVAL_HOURS > 0, "–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º"
        assert TTL_HOURS > 0, "TTL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º"
        assert TRUNC_TASK_TITLE_LEN > 0, "–î–ª–∏–Ω–∞ –æ–±—Ä–µ–∑–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"
        
        print(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–æ–≤: {REPEAT_INTERVAL_HOURS}—á")
        print(f"‚úÖ TTL: {TTL_HOURS}—á")
        print(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {TZ}")
        print(f"‚úÖ –¢–∏—Ö–∏–µ —á–∞—Å—ã: {QUIET_START}-{QUIET_END}")
        print(f"‚úÖ –û–±—Ä–µ–∑–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {TRUNC_TASK_TITLE_LEN}")
        print(f"‚úÖ –û–±—Ä–µ–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {TRUNC_COMMENT_LEN}")
        print(f"‚úÖ –†–µ–∂–∏–º DRY_RUN: {DRY_RUN}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ –≠—Ç–∞–ø–∞ 4")
    print("=" * 60)
    
    success = True
    success &= await test_worker_architecture()
    success &= await test_configuration_loading()
    success &= await test_time_handling()
    success &= await test_grouping_logic()
    success &= await test_message_formats()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ –≠–¢–ê–ü 4 –ó–ê–í–ï–†–®–Å–ù –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤–æ—Ä–∫–µ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚úÖ –¢–∏—Ö–∏–µ —á–∞—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")
        print("‚úÖ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç PRD")
        print("‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã")
        print("\nüîß –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ù –ó–ê–ü–£–°–ö–£!")
        print("\nüìã –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:")
        print("1. –ù–∞ VPS: python -m app.worker")
        print("2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: tail -f logs/pyrus_raw_*.ndjson")
        print("3. –í –ë–î —Ç–∞–±–ª–∏—Ü–∞ logs –ø–æ–∫–∞–∂–µ—Ç —Å–æ–±—ã—Ç–∏—è notify_dry_run")
        print("\nüöÄ –ì–û–¢–û–í–´ –ö –≠–¢–ê–ü–£ 5 (Telegram –±–æ—Ç)!")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –≤–æ—Ä–∫–µ—Ä–µ")
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(main())
